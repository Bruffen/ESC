 Percent |	Source code & Disassembly of sort for cycles
------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000400830 <sort1>:
    0.02 :	  400830:       push   %r15
    0.01 :	  400832:       mov    %edx,%eax
    0.00 :	  400834:       mov    %esi,%r9d
    0.00 :	  400837:       push   %r14
    0.05 :	  400839:       sub    $0x1,%eax
    0.00 :	  40083c:       push   %r13
    0.00 :	  40083e:       push   %r12
    0.02 :	  400840:       push   %rbp
    0.00 :	  400841:       push   %rbx
    0.01 :	  400842:       mov    %rdi,%rbx
    0.00 :	  400845:       sub    $0x68,%rsp
    0.00 :	  400849:       mov    %rdi,(%rsp)
    0.05 :	  40084d:       mov    %edx,0x10(%rsp)
    0.00 :	  400851:       mov    %eax,0x54(%rsp)
    0.00 :	  400855:       mov    0x10(%rsp),%eax
    0.02 :	  400859:       mov    %rbx,%r10
    0.01 :	  40085c:       add    %r9d,%eax
    0.02 :	  40085f:       mov    %eax,%edx
    0.00 :	  400861:       shr    $0x1f,%edx
    0.02 :	  400864:       add    %edx,%eax
    0.02 :	  400866:       mov    %r9d,%edx
    0.01 :	  400869:       sar    %eax
    0.04 :	  40086b:       cltq   
    0.03 :	  40086d:       mov    (%rbx,%rax,4),%ecx
    0.18 :	  400870:       mov    0x54(%rsp),%eax
    0.03 :	  400874:       cmp    %eax,%edx
    0.00 :	  400876:       jg     400909 <sort1+0xd9>
    0.01 :	  40087c:       movslq %edx,%rsi
    0.02 :	  40087f:       shl    $0x2,%rsi
    0.14 :	  400883:       lea    (%r10,%rsi,1),%rbx
    0.01 :	  400887:       mov    (%rbx),%r11d
    0.17 :	  40088a:       cmp    0x10(%rsp),%edx
    0.00 :	  40088e:       jge    40092c <sort1+0xfc>
    0.01 :	  400894:       cmp    %r11d,%ecx
    0.18 :	  400897:       lea    0x4(%r10,%rsi,1),%rsi
    0.00 :	  40089c:       setg   %dil
    0.15 :	  4008a0:       test   %dil,%dil
    0.00 :	  4008a3:       jne    4008b6 <sort1+0x86>
    0.33 :	  4008a5:       jmpq   40092c <sort1+0xfc>
    0.00 :	  4008aa:       nopw   0x0(%rax,%rax,1)
    0.22 :	  4008b0:       cmp    0x10(%rsp),%edx
    0.00 :	  4008b4:       jge    4008c8 <sort1+0x98>
    1.26 :	  4008b6:       mov    (%rsi),%r11d
    0.46 :	  4008b9:       mov    %rsi,%rbx
    0.00 :	  4008bc:       add    $0x1,%edx
    0.02 :	  4008bf:       add    $0x4,%rsi
    0.44 :	  4008c3:       cmp    %r11d,%ecx
    0.00 :	  4008c6:       jg     4008b0 <sort1+0x80>
    0.35 :	  4008c8:       movslq %eax,%rsi
    0.25 :	  4008cb:       shl    $0x2,%rsi
    0.08 :	  4008cf:       lea    (%r10,%rsi,1),%r8
    0.06 :	  4008d3:       mov    (%r8),%edi
    0.37 :	  4008d6:       cmp    %eax,%r9d
    0.00 :	  4008d9:       jge    400a40 <sort1+0x210>
    0.00 :	  4008df:       cmp    %edi,%ecx
    0.00 :	  4008e1:       jge    400a40 <sort1+0x210>
    0.27 :	  4008e7:       lea    -0x4(%r10,%rsi,1),%rsi
    0.17 :	  4008ec:       jmp    4008f4 <sort1+0xc4>
    0.00 :	  4008ee:       xchg   %ax,%ax
    0.02 :	  4008f0:       cmp    %edi,%ecx
    0.00 :	  4008f2:       jge    400905 <sort1+0xd5>
    0.38 :	  4008f4:       sub    $0x1,%eax
    0.14 :	  4008f7:       mov    %rsi,%r8
    0.02 :	  4008fa:       mov    (%rsi),%edi
    0.41 :	  4008fc:       sub    $0x4,%rsi
    0.03 :	  400900:       cmp    %eax,%r9d
    0.00 :	  400903:       jl     4008f0 <sort1+0xc0>
    0.45 :	  400905:       cmp    %edx,%eax
    0.00 :	  400907:       jge    400943 <sort1+0x113>
    0.12 :	  400909:       mov    %edx,0x14(%rsp)
    0.21 :	  40090d:       mov    %eax,0x18(%rsp)
    0.08 :	  400911:       cmp    %eax,%r9d
    0.00 :	  400914:       jl     400962 <sort1+0x132>
    0.02 :	  400916:       mov    0x14(%rsp),%ebx
    0.06 :	  40091a:       cmp    %ebx,0x10(%rsp)
    0.00 :	  40091e:       jle    400953 <sort1+0x123>
    0.03 :	  400920:       mov    %ebx,%r9d
    0.01 :	  400923:       mov    (%rsp),%rbx
    0.02 :	  400927:       jmpq   400855 <sort1+0x25>
    0.14 :	  40092c:       movslq %eax,%rsi
    0.05 :	  40092f:       shl    $0x2,%rsi
    0.05 :	  400933:       lea    (%r10,%rsi,1),%r8
    0.08 :	  400937:       mov    (%r8),%edi
    0.18 :	  40093a:       cmp    %edi,%ecx
    0.00 :	  40093c:       jge    400943 <sort1+0x113>
    0.16 :	  40093e:       cmp    %eax,%r9d
    0.00 :	  400941:       jl     4008e7 <sort1+0xb7>
    0.54 :	  400943:       mov    %edi,(%rbx)
    0.66 :	  400945:       add    $0x1,%edx
    0.01 :	  400948:       sub    $0x1,%eax
    0.00 :	  40094b:       mov    %r11d,(%r8)
    0.43 :	  40094e:       jmpq   400874 <sort1+0x44>
    0.04 :	  400953:       add    $0x68,%rsp
    0.02 :	  400957:       pop    %rbx
    0.02 :	  400958:       pop    %rbp
    0.01 :	  400959:       pop    %r12
    0.01 :	  40095b:       pop    %r13
    0.00 :	  40095d:       pop    %r14
    0.00 :	  40095f:       pop    %r15
    0.01 :	  400961:       retq   
    0.00 :	  400962:       add    $0x1,%eax
    0.03 :	  400965:       mov    %eax,0x8(%rsp)
    0.02 :	  400969:       add    %r9d,%eax
    0.03 :	  40096c:       mov    (%rsp),%rbx
    0.01 :	  400970:       mov    %eax,%edx
    0.01 :	  400972:       shr    $0x1f,%edx
    0.01 :	  400975:       add    %edx,%eax
    0.01 :	  400977:       mov    %r9d,%edx
    0.01 :	  40097a:       sar    %eax
    0.02 :	  40097c:       mov    %rbx,%r10
    0.00 :	  40097f:       cltq   
    0.01 :	  400981:       mov    (%rbx,%rax,4),%ecx
    0.18 :	  400984:       mov    0x18(%rsp),%eax
    0.02 :	  400988:       cmp    %eax,%edx
    0.00 :	  40098a:       jg     400a19 <sort1+0x1e9>
    0.00 :	  400990:       movslq %edx,%rsi
    0.03 :	  400993:       shl    $0x2,%rsi
    0.21 :	  400997:       lea    (%r10,%rsi,1),%rbx
    0.02 :	  40099b:       mov    (%rbx),%r11d
    0.24 :	  40099e:       cmp    %r11d,%ecx
    0.00 :	  4009a1:       jle    400a4d <sort1+0x21d>
    0.56 :	  4009a7:       cmp    %edx,0x8(%rsp)
    0.56 :	  4009ab:       lea    0x4(%r10,%rsi,1),%rsi
    0.00 :	  4009b0:       setg   %dil
    0.04 :	  4009b4:       test   %dil,%dil
    0.00 :	  4009b7:       jne    4009c5 <sort1+0x195>
    0.00 :	  4009b9:       jmpq   400a4d <sort1+0x21d>
    0.00 :	  4009be:       xchg   %ax,%ax
    0.35 :	  4009c0:       cmp    %r11d,%ecx
    0.00 :	  4009c3:       jle    4009d8 <sort1+0x1a8>
    0.46 :	  4009c5:       mov    %rsi,%rbx
    0.22 :	  4009c8:       mov    (%rsi),%r11d
    0.24 :	  4009cb:       add    $0x1,%edx
    0.11 :	  4009ce:       add    $0x4,%rsi
    0.22 :	  4009d2:       cmp    %edx,0x8(%rsp)
    0.00 :	  4009d6:       jg     4009c0 <sort1+0x190>
    0.66 :	  4009d8:       movslq %eax,%rsi
    0.47 :	  4009db:       shl    $0x2,%rsi
    0.13 :	  4009df:       lea    (%r10,%rsi,1),%r8
    0.10 :	  4009e3:       mov    (%r8),%edi
    0.52 :	  4009e6:       cmp    %edi,%ecx
    0.00 :	  4009e8:       jge    400b50 <sort1+0x320>
    0.25 :	  4009ee:       cmp    %eax,%r9d
    0.00 :	  4009f1:       jge    400b50 <sort1+0x320>
    0.25 :	  4009f7:       lea    -0x4(%r10,%rsi,1),%rsi
    0.14 :	  4009fc:       jmp    400a05 <sort1+0x1d5>
    0.00 :	  4009fe:       xchg   %ax,%ax
    0.48 :	  400a00:       cmp    %eax,%r9d
    0.00 :	  400a03:       jge    400a15 <sort1+0x1e5>
    0.21 :	  400a05:       mov    (%rsi),%edi
    0.84 :	  400a07:       mov    %rsi,%r8
    0.00 :	  400a0a:       sub    $0x1,%eax
    0.05 :	  400a0d:       sub    $0x4,%rsi
    0.04 :	  400a11:       cmp    %edi,%ecx
    0.00 :	  400a13:       jl     400a00 <sort1+0x1d0>
    0.74 :	  400a15:       cmp    %edx,%eax
    0.00 :	  400a17:       jge    400a64 <sort1+0x234>
    0.11 :	  400a19:       mov    %edx,0x1c(%rsp)
    0.22 :	  400a1d:       mov    %eax,0x20(%rsp)
    0.08 :	  400a21:       cmp    %eax,%r9d
    0.00 :	  400a24:       jl     400a74 <sort1+0x244>
    0.03 :	  400a26:       mov    0x1c(%rsp),%ebx
    0.06 :	  400a2a:       cmp    %ebx,0x8(%rsp)
    0.00 :	  400a2e:       jle    400916 <sort1+0xe6>
    0.03 :	  400a34:       mov    %ebx,%r9d
    0.00 :	  400a37:       mov    0x8(%rsp),%eax
    0.03 :	  400a3b:       jmpq   400969 <sort1+0x139>
    0.13 :	  400a40:       cmp    %eax,%edx
    0.00 :	  400a42:       jg     400909 <sort1+0xd9>
    0.06 :	  400a48:       jmpq   400943 <sort1+0x113>
    0.52 :	  400a4d:       movslq %eax,%rsi
    0.23 :	  400a50:       shl    $0x2,%rsi
    0.07 :	  400a54:       lea    (%r10,%rsi,1),%r8
    0.05 :	  400a58:       mov    (%r8),%edi
    0.35 :	  400a5b:       cmp    %edi,%ecx
    0.00 :	  400a5d:       jge    400a64 <sort1+0x234>
    0.28 :	  400a5f:       cmp    %eax,%r9d
    0.00 :	  400a62:       jl     4009f7 <sort1+0x1c7>
    0.74 :	  400a64:       mov    %edi,(%rbx)
    0.92 :	  400a66:       add    $0x1,%edx
    0.00 :	  400a69:       sub    $0x1,%eax
    0.02 :	  400a6c:       mov    %r11d,(%r8)
    0.56 :	  400a6f:       jmpq   400988 <sort1+0x158>
    0.00 :	  400a74:       add    $0x1,%eax
    0.02 :	  400a77:       mov    %eax,0xc(%rsp)
    0.04 :	  400a7b:       add    %r9d,%eax
    0.01 :	  400a7e:       mov    (%rsp),%rbx
    0.01 :	  400a82:       mov    %eax,%edx
    0.00 :	  400a84:       shr    $0x1f,%edx
    0.01 :	  400a87:       add    %edx,%eax
    0.03 :	  400a89:       mov    %r9d,%edx
    0.00 :	  400a8c:       sar    %eax
    0.03 :	  400a8e:       mov    %rbx,%r10
    0.00 :	  400a91:       cltq   
    0.02 :	  400a93:       mov    (%rbx,%rax,4),%ecx
    0.14 :	  400a96:       mov    0x20(%rsp),%eax
    0.02 :	  400a9a:       cmp    %eax,%edx
    0.00 :	  400a9c:       jg     400b29 <sort1+0x2f9>
    0.02 :	  400aa2:       movslq %edx,%rsi
    0.07 :	  400aa5:       shl    $0x2,%rsi
    0.23 :	  400aa9:       lea    (%r10,%rsi,1),%rbx
    0.00 :	  400aad:       mov    (%rbx),%r11d
    0.32 :	  400ab0:       cmp    %r11d,%ecx
    0.00 :	  400ab3:       jle    4011db <sort1+0x9ab>
    0.59 :	  400ab9:       cmp    %edx,0xc(%rsp)
    0.74 :	  400abd:       lea    0x4(%r10,%rsi,1),%rsi
    0.00 :	  400ac2:       setg   %dil
    0.06 :	  400ac6:       test   %dil,%dil
    0.00 :	  400ac9:       jne    400ad5 <sort1+0x2a5>
    0.00 :	  400acb:       jmpq   4011db <sort1+0x9ab>
    0.60 :	  400ad0:       cmp    %r11d,%ecx
    0.00 :	  400ad3:       jle    400ae8 <sort1+0x2b8>
    0.39 :	  400ad5:       mov    %rsi,%rbx
    0.22 :	  400ad8:       mov    (%rsi),%r11d
    0.23 :	  400adb:       add    $0x1,%edx
    0.13 :	  400ade:       add    $0x4,%rsi
    0.14 :	  400ae2:       cmp    %edx,0xc(%rsp)
    0.00 :	  400ae6:       jg     400ad0 <sort1+0x2a0>
    0.47 :	  400ae8:       movslq %eax,%rsi
    0.34 :	  400aeb:       shl    $0x2,%rsi
    0.10 :	  400aef:       lea    (%r10,%rsi,1),%r8
    0.06 :	  400af3:       mov    (%r8),%edi
    0.48 :	  400af6:       cmp    %eax,%r9d
    0.00 :	  400af9:       jge    400b5d <sort1+0x32d>
    0.00 :	  400afb:       cmp    %edi,%ecx
    0.00 :	  400afd:       jge    400b5d <sort1+0x32d>
    0.33 :	  400aff:       lea    -0x4(%r10,%rsi,1),%rsi
    0.21 :	  400b04:       jmp    400b15 <sort1+0x2e5>
    0.00 :	  400b06:       nopw   %cs:0x0(%rax,%rax,1)
    0.59 :	  400b10:       cmp    %eax,%r9d
    0.00 :	  400b13:       jge    400b25 <sort1+0x2f5>
    0.29 :	  400b15:       mov    (%rsi),%edi
    1.02 :	  400b17:       mov    %rsi,%r8
    0.00 :	  400b1a:       sub    $0x1,%eax
    0.07 :	  400b1d:       sub    $0x4,%rsi
    0.00 :	  400b21:       cmp    %edi,%ecx
    0.00 :	  400b23:       jl     400b10 <sort1+0x2e0>
    0.79 :	  400b25:       cmp    %edx,%eax
    0.00 :	  400b27:       jge    400b61 <sort1+0x331>
    0.13 :	  400b29:       mov    %edx,0x24(%rsp)
    0.25 :	  400b2d:       mov    %eax,0x2c(%rsp)
    0.05 :	  400b31:       cmp    %eax,%r9d
    0.00 :	  400b34:       jl     400b71 <sort1+0x341>
    0.02 :	  400b36:       mov    0x24(%rsp),%ebx
    0.05 :	  400b3a:       cmp    %ebx,0xc(%rsp)
    0.00 :	  400b3e:       jle    400a26 <sort1+0x1f6>
    0.04 :	  400b44:       mov    %ebx,%r9d
    0.01 :	  400b47:       mov    0xc(%rsp),%eax
    0.01 :	  400b4b:       jmpq   400a7b <sort1+0x24b>
    0.17 :	  400b50:       cmp    %eax,%edx
    0.00 :	  400b52:       jg     400a19 <sort1+0x1e9>
    0.07 :	  400b58:       jmpq   400a64 <sort1+0x234>
    0.22 :	  400b5d:       cmp    %eax,%edx
    0.00 :	  400b5f:       jg     400b29 <sort1+0x2f9>
    1.08 :	  400b61:       mov    %edi,(%rbx)
    1.11 :	  400b63:       add    $0x1,%edx
    0.00 :	  400b66:       sub    $0x1,%eax
    0.05 :	  400b69:       mov    %r11d,(%r8)
    0.58 :	  400b6c:       jmpq   400a9a <sort1+0x26a>
    0.00 :	  400b71:       add    $0x1,%eax
    0.02 :	  400b74:       mov    %eax,0x28(%rsp)
    0.01 :	  400b78:       mov    %eax,%ebp
    0.01 :	  400b7a:       mov    %ebp,%eax
    0.02 :	  400b7c:       mov    (%rsp),%rbx
    0.01 :	  400b80:       add    %r9d,%eax
    0.01 :	  400b83:       mov    %eax,%edx
    0.01 :	  400b85:       shr    $0x1f,%edx
    0.02 :	  400b88:       add    %edx,%eax
    0.01 :	  400b8a:       mov    %rbx,%r11
    0.00 :	  400b8d:       mov    %r9d,%edx
    0.01 :	  400b90:       sar    %eax
    0.01 :	  400b92:       cltq   
    0.02 :	  400b94:       mov    (%rbx,%rax,4),%ecx
    0.12 :	  400b97:       mov    0x2c(%rsp),%eax
    0.00 :	  400b9b:       cmp    %eax,%edx
    0.00 :	  400b9d:       jg     400c1d <sort1+0x3ed>
    0.01 :	  400b9f:       movslq %edx,%rsi
    0.06 :	  400ba2:       shl    $0x2,%rsi
    0.16 :	  400ba6:       lea    (%r11,%rsi,1),%rbx
    0.02 :	  400baa:       mov    (%rbx),%r8d
    0.13 :	  400bad:       cmp    %r8d,%ecx
    0.00 :	  400bb0:       jle    400c58 <sort1+0x428>
    0.36 :	  400bb6:       lea    0x4(%r11,%rsi,1),%rsi
    0.33 :	  400bbb:       cmp    %edx,%ebp
    0.00 :	  400bbd:       setg   %dil
    0.00 :	  400bc1:       test   %dil,%dil
    0.00 :	  400bc4:       jne    400bd5 <sort1+0x3a5>
    0.00 :	  400bc6:       jmpq   400c58 <sort1+0x428>
    0.00 :	  400bcb:       nopl   0x0(%rax,%rax,1)
    0.00 :	  400bd0:       cmp    %r8d,%ecx
    0.00 :	  400bd3:       jle    400be6 <sort1+0x3b6>
    0.60 :	  400bd5:       add    $0x1,%edx
    0.15 :	  400bd8:       mov    %rsi,%rbx
    0.03 :	  400bdb:       mov    (%rsi),%r8d
    0.53 :	  400bde:       add    $0x4,%rsi
    0.06 :	  400be2:       cmp    %edx,%ebp
    0.00 :	  400be4:       jg     400bd0 <sort1+0x3a0>
    0.75 :	  400be6:       movslq %eax,%rdi
    0.39 :	  400be9:       shl    $0x2,%rdi
    0.16 :	  400bed:       lea    (%r11,%rdi,1),%r10
    0.08 :	  400bf1:       mov    (%r10),%esi
    0.50 :	  400bf4:       cmp    %esi,%ecx
    0.00 :	  400bf6:       jge    400c44 <sort1+0x414>
    0.19 :	  400bf8:       cmp    %eax,%r9d
    0.00 :	  400bfb:       jge    400c44 <sort1+0x414>
    0.19 :	  400bfd:       lea    -0x4(%r11,%rdi,1),%rdi
    0.09 :	  400c02:       jmp    400c08 <sort1+0x3d8>
    0.00 :	  400c04:       cmp    %esi,%ecx
    0.00 :	  400c06:       jge    400c19 <sort1+0x3e9>
    0.62 :	  400c08:       sub    $0x1,%eax
    0.19 :	  400c0b:       mov    %rdi,%r10
    0.04 :	  400c0e:       mov    (%rdi),%esi
    0.57 :	  400c10:       sub    $0x4,%rdi
    0.02 :	  400c14:       cmp    %eax,%r9d
    0.00 :	  400c17:       jl     400c04 <sort1+0x3d4>
    0.66 :	  400c19:       cmp    %edx,%eax
    0.00 :	  400c1b:       jge    400c48 <sort1+0x418>
    0.10 :	  400c1d:       mov    %edx,0x30(%rsp)
    0.25 :	  400c21:       mov    %eax,0x34(%rsp)
    0.05 :	  400c25:       cmp    %eax,%r9d
    0.00 :	  400c28:       jl     400c71 <sort1+0x441>
    0.05 :	  400c2a:       mov    0x30(%rsp),%ebx
    0.05 :	  400c2e:       cmp    %ebx,0x28(%rsp)
    0.00 :	  400c32:       jle    400b36 <sort1+0x306>
    0.03 :	  400c38:       mov    %ebx,%r9d
    0.01 :	  400c3b:       mov    0x28(%rsp),%ebp
    0.02 :	  400c3f:       jmpq   400b7a <sort1+0x34a>
    0.15 :	  400c44:       cmp    %eax,%edx
    0.00 :	  400c46:       jg     400c1d <sort1+0x3ed>
    0.71 :	  400c48:       mov    %esi,(%rbx)
    0.80 :	  400c4a:       add    $0x1,%edx
    0.00 :	  400c4d:       sub    $0x1,%eax
    0.04 :	  400c50:       mov    %r8d,(%r10)
    0.39 :	  400c53:       jmpq   400b9b <sort1+0x36b>
    0.42 :	  400c58:       movslq %eax,%rdi
    0.23 :	  400c5b:       shl    $0x2,%rdi
    0.05 :	  400c5f:       lea    (%r11,%rdi,1),%r10
    0.03 :	  400c63:       mov    (%r10),%esi
    0.27 :	  400c66:       cmp    %esi,%ecx
    0.00 :	  400c68:       jge    400c48 <sort1+0x418>
    0.23 :	  400c6a:       cmp    %eax,%r9d
    0.00 :	  400c6d:       jl     400bfd <sort1+0x3cd>
    0.00 :	  400c6f:       jmp    400c48 <sort1+0x418>
    0.00 :	  400c71:       add    $0x1,%eax
    0.03 :	  400c74:       mov    %eax,0x38(%rsp)
    0.04 :	  400c78:       mov    %eax,%ebx
    0.00 :	  400c7a:       mov    %ebx,%eax
    0.02 :	  400c7c:       mov    (%rsp),%rdi
    0.01 :	  400c80:       mov    %r9d,%esi
    0.02 :	  400c83:       add    %r9d,%eax
    0.00 :	  400c86:       mov    %eax,%edx
    0.02 :	  400c88:       shr    $0x1f,%edx
    0.01 :	  400c8b:       add    %edx,%eax
    0.02 :	  400c8d:       mov    %rdi,%rbp
    0.00 :	  400c90:       sar    %eax
    0.00 :	  400c92:       cltq   
    0.01 :	  400c94:       mov    (%rdi,%rax,4),%ecx
    0.16 :	  400c97:       mov    0x34(%rsp),%eax
    0.02 :	  400c9b:       cmp    %eax,%esi
    0.00 :	  400c9d:       jg     400d1e <sort1+0x4ee>
    0.01 :	  400c9f:       movslq %esi,%rdx
    0.07 :	  400ca2:       shl    $0x2,%rdx
    0.15 :	  400ca6:       lea    0x0(%rbp,%rdx,1),%r11
    0.04 :	  400cab:       mov    (%r11),%r8d
    0.52 :	  400cae:       cmp    %r8d,%ecx
    0.00 :	  400cb1:       jle    400d5a <sort1+0x52a>
    0.45 :	  400cb7:       lea    0x4(%rbp,%rdx,1),%rdx
    0.28 :	  400cbc:       cmp    %esi,%ebx
    0.00 :	  400cbe:       setg   %dil
    0.00 :	  400cc2:       test   %dil,%dil
    0.00 :	  400cc5:       jne    400cd5 <sort1+0x4a5>
    0.00 :	  400cc7:       jmpq   400d5a <sort1+0x52a>
    0.00 :	  400ccc:       nopl   0x0(%rax)
    0.01 :	  400cd0:       cmp    %r8d,%ecx
    0.00 :	  400cd3:       jle    400ce6 <sort1+0x4b6>
    0.62 :	  400cd5:       add    $0x1,%esi
    0.18 :	  400cd8:       mov    %rdx,%r11
    0.05 :	  400cdb:       mov    (%rdx),%r8d
    0.52 :	  400cde:       add    $0x4,%rdx
    0.07 :	  400ce2:       cmp    %esi,%ebx
    0.00 :	  400ce4:       jg     400cd0 <sort1+0x4a0>
    0.61 :	  400ce6:       movslq %eax,%rdx
    0.35 :	  400ce9:       shl    $0x2,%rdx
    0.14 :	  400ced:       lea    0x0(%rbp,%rdx,1),%r10
    0.22 :	  400cf2:       mov    (%r10),%edi
    0.49 :	  400cf5:       cmp    %eax,%r9d
    0.00 :	  400cf8:       jge    400d45 <sort1+0x515>
    0.00 :	  400cfa:       cmp    %edi,%ecx
    0.00 :	  400cfc:       jge    400d45 <sort1+0x515>
    0.33 :	  400cfe:       lea    -0x4(%rbp,%rdx,1),%rdx
    0.20 :	  400d03:       jmp    400d09 <sort1+0x4d9>
    0.00 :	  400d05:       cmp    %edi,%ecx
    0.00 :	  400d07:       jge    400d1a <sort1+0x4ea>
    0.62 :	  400d09:       sub    $0x1,%eax
    0.24 :	  400d0c:       mov    %rdx,%r10
    0.05 :	  400d0f:       mov    (%rdx),%edi
    0.51 :	  400d11:       sub    $0x4,%rdx
    0.04 :	  400d15:       cmp    %eax,%r9d
    0.00 :	  400d18:       jl     400d05 <sort1+0x4d5>
    0.61 :	  400d1a:       cmp    %esi,%eax
    0.00 :	  400d1c:       jge    400d49 <sort1+0x519>
    0.07 :	  400d1e:       mov    %esi,0x3c(%rsp)
    0.24 :	  400d22:       mov    %eax,0x40(%rsp)
    0.05 :	  400d26:       cmp    %eax,%r9d
    0.00 :	  400d29:       jl     400d74 <sort1+0x544>
    0.01 :	  400d2b:       mov    0x3c(%rsp),%ebx
    0.05 :	  400d2f:       cmp    %ebx,0x38(%rsp)
    0.00 :	  400d33:       jle    400c2a <sort1+0x3fa>
    0.04 :	  400d39:       mov    %ebx,%r9d
    0.01 :	  400d3c:       mov    0x38(%rsp),%ebx
    0.01 :	  400d40:       jmpq   400c7a <sort1+0x44a>
    0.18 :	  400d45:       cmp    %eax,%esi
    0.00 :	  400d47:       jg     400d1e <sort1+0x4ee>
    0.69 :	  400d49:       mov    %edi,(%r11)
    0.86 :	  400d4c:       add    $0x1,%esi
    0.00 :	  400d4f:       sub    $0x1,%eax
    0.06 :	  400d52:       mov    %r8d,(%r10)
    0.42 :	  400d55:       jmpq   400c9b <sort1+0x46b>
    0.38 :	  400d5a:       movslq %eax,%rdx
    0.18 :	  400d5d:       shl    $0x2,%rdx
    0.04 :	  400d61:       lea    0x0(%rbp,%rdx,1),%r10
    0.08 :	  400d66:       mov    (%r10),%edi
    0.25 :	  400d69:       cmp    %edi,%ecx
    0.00 :	  400d6b:       jge    400d49 <sort1+0x519>
    0.22 :	  400d6d:       cmp    %eax,%r9d
    0.00 :	  400d70:       jl     400cfe <sort1+0x4ce>
    0.00 :	  400d72:       jmp    400d49 <sort1+0x519>
    0.01 :	  400d74:       add    $0x1,%eax
    0.02 :	  400d77:       mov    %eax,0x44(%rsp)
    0.05 :	  400d7b:       mov    %eax,%ebx
    0.00 :	  400d7d:       mov    %ebx,%eax
    0.01 :	  400d7f:       mov    (%rsp),%rdi
    0.01 :	  400d83:       mov    %r9d,%esi
    0.01 :	  400d86:       add    %r9d,%eax
    0.00 :	  400d89:       mov    %eax,%edx
    0.02 :	  400d8b:       shr    $0x1f,%edx
    0.01 :	  400d8e:       add    %edx,%eax
    0.03 :	  400d90:       mov    %rdi,%rbp
    0.00 :	  400d93:       sar    %eax
    0.02 :	  400d95:       cltq   
    0.03 :	  400d97:       mov    (%rdi,%rax,4),%ecx
    0.15 :	  400d9a:       mov    0x40(%rsp),%eax
    0.00 :	  400d9e:       mov    %eax,%edx
    0.02 :	  400da0:       cmp    %edx,%esi
    0.00 :	  400da2:       jg     400e29 <sort1+0x5f9>
    0.01 :	  400da8:       movslq %esi,%rax
    0.07 :	  400dab:       shl    $0x2,%rax
    0.12 :	  400daf:       lea    0x0(%rbp,%rax,1),%r11
    0.03 :	  400db4:       mov    (%r11),%r8d
    0.50 :	  400db7:       cmp    %esi,%ebx
    0.00 :	  400db9:       jle    4011aa <sort1+0x97a>
    0.01 :	  400dbf:       lea    0x4(%rbp,%rax,1),%rax
    0.00 :	  400dc4:       cmp    %r8d,%ecx
    0.24 :	  400dc7:       setg   %dil
    0.17 :	  400dcb:       test   %dil,%dil
    0.00 :	  400dce:       jne    400ddd <sort1+0x5ad>
    0.36 :	  400dd0:       jmpq   4011aa <sort1+0x97a>
    0.00 :	  400dd5:       nopl   (%rax)
    0.00 :	  400dd8:       cmp    %r8d,%ecx
    0.00 :	  400ddb:       jle    400dee <sort1+0x5be>
    0.85 :	  400ddd:       add    $0x1,%esi
    0.38 :	  400de0:       mov    %rax,%r11
    0.05 :	  400de3:       mov    (%rax),%r8d
    0.61 :	  400de6:       add    $0x4,%rax
    0.07 :	  400dea:       cmp    %esi,%ebx
    0.00 :	  400dec:       jg     400dd8 <sort1+0x5a8>
    0.47 :	  400dee:       movslq %edx,%rax
    0.38 :	  400df1:       shl    $0x2,%rax
    0.12 :	  400df5:       lea    0x0(%rbp,%rax,1),%r10
    0.22 :	  400dfa:       mov    (%r10),%edi
    0.41 :	  400dfd:       cmp    %edx,%r9d
    0.00 :	  400e00:       jge    400e52 <sort1+0x622>
    0.00 :	  400e02:       cmp    %edi,%ecx
    0.00 :	  400e04:       jge    400e52 <sort1+0x622>
    0.30 :	  400e06:       lea    -0x4(%rbp,%rax,1),%rax
    0.23 :	  400e0b:       jmp    400e14 <sort1+0x5e4>
    0.00 :	  400e0d:       nopl   (%rax)
    0.01 :	  400e10:       cmp    %edi,%ecx
    0.00 :	  400e12:       jge    400e25 <sort1+0x5f5>
    0.56 :	  400e14:       sub    $0x1,%edx
    0.13 :	  400e17:       mov    %rax,%r10
    0.06 :	  400e1a:       mov    (%rax),%edi
    0.43 :	  400e1c:       sub    $0x4,%rax
    0.07 :	  400e20:       cmp    %edx,%r9d
    0.00 :	  400e23:       jl     400e10 <sort1+0x5e0>
    0.54 :	  400e25:       cmp    %esi,%edx
    0.00 :	  400e27:       jge    400e56 <sort1+0x626>
    0.11 :	  400e29:       mov    %esi,0x48(%rsp)
    0.23 :	  400e2d:       mov    %edx,%eax
    0.00 :	  400e2f:       mov    %edx,0x4c(%rsp)
    0.10 :	  400e33:       cmp    %edx,%r9d
    0.00 :	  400e36:       jl     400e67 <sort1+0x637>
    0.10 :	  400e38:       mov    0x48(%rsp),%ebx
    0.08 :	  400e3c:       cmp    %ebx,0x44(%rsp)
    0.04 :	  400e40:       jle    400d2b <sort1+0x4fb>
    0.03 :	  400e46:       mov    %ebx,%r9d
    0.01 :	  400e49:       mov    0x44(%rsp),%ebx
    0.01 :	  400e4d:       jmpq   400d7d <sort1+0x54d>
    0.15 :	  400e52:       cmp    %edx,%esi
    0.00 :	  400e54:       jg     400e29 <sort1+0x5f9>
    0.66 :	  400e56:       mov    %edi,(%r11)
    0.79 :	  400e59:       add    $0x1,%esi
    0.01 :	  400e5c:       sub    $0x1,%edx
    0.05 :	  400e5f:       mov    %r8d,(%r10)
    0.42 :	  400e62:       jmpq   400da0 <sort1+0x570>
    0.00 :	  400e67:       add    $0x1,%eax
    0.02 :	  400e6a:       mov    %eax,0x50(%rsp)
    0.02 :	  400e6e:       mov    %eax,%r11d
    0.01 :	  400e71:       mov    %r11d,%eax
    0.02 :	  400e74:       mov    (%rsp),%rbx
    0.00 :	  400e78:       mov    %r9d,%r10d
    0.01 :	  400e7b:       add    %r9d,%eax
    0.02 :	  400e7e:       mov    0x4c(%rsp),%r14d
    0.02 :	  400e83:       mov    %eax,%edx
    0.00 :	  400e85:       shr    $0x1f,%edx
    0.01 :	  400e88:       add    %edx,%eax
    0.00 :	  400e8a:       sar    %eax
    0.02 :	  400e8c:       cltq   
    0.03 :	  400e8e:       mov    (%rbx,%rax,4),%ecx
    0.13 :	  400e91:       cmp    %r14d,%r10d
    0.00 :	  400e94:       jg     400f13 <sort1+0x6e3>
    0.02 :	  400e96:       movslq %r10d,%rax
    0.07 :	  400e99:       shl    $0x2,%rax
    0.12 :	  400e9d:       lea    (%rbx,%rax,1),%r8
    0.04 :	  400ea1:       mov    (%r8),%esi
    0.49 :	  400ea4:       cmp    %r10d,%r11d
    0.00 :	  400ea7:       jle    40117a <sort1+0x94a>
    0.00 :	  400ead:       lea    0x4(%rbx,%rax,1),%rax
    0.00 :	  400eb2:       cmp    %esi,%ecx
    0.18 :	  400eb4:       setg   %dl
    0.18 :	  400eb7:       test   %dl,%dl
    0.00 :	  400eb9:       jne    400ec4 <sort1+0x694>
    0.40 :	  400ebb:       jmpq   40117a <sort1+0x94a>
    0.01 :	  400ec0:       cmp    %esi,%ecx
    0.00 :	  400ec2:       jle    400ed6 <sort1+0x6a6>
    0.81 :	  400ec4:       add    $0x1,%r10d
    0.35 :	  400ec8:       mov    %rax,%r8
    0.06 :	  400ecb:       mov    (%rax),%esi
    0.35 :	  400ecd:       add    $0x4,%rax
    0.11 :	  400ed1:       cmp    %r10d,%r11d
    0.00 :	  400ed4:       jg     400ec0 <sort1+0x690>
    0.54 :	  400ed6:       movslq %r14d,%rax
    0.33 :	  400ed9:       shl    $0x2,%rax
    0.14 :	  400edd:       lea    (%rbx,%rax,1),%rdi
    0.07 :	  400ee1:       mov    (%rdi),%edx
    0.42 :	  400ee3:       cmp    %r14d,%r9d
    0.00 :	  400ee6:       jge    400f30 <sort1+0x700>
    0.00 :	  400ee8:       cmp    %edx,%ecx
    0.00 :	  400eea:       jge    400f30 <sort1+0x700>
    0.28 :	  400eec:       lea    -0x4(%rbx,%rax,1),%rax
    0.21 :	  400ef1:       jmp    400efd <sort1+0x6cd>
    0.00 :	  400ef3:       nopl   0x0(%rax,%rax,1)
    0.34 :	  400ef8:       cmp    %r14d,%r9d
    0.00 :	  400efb:       jge    400f0e <sort1+0x6de>
    0.23 :	  400efd:       mov    (%rax),%edx
    0.68 :	  400eff:       mov    %rax,%rdi
    0.00 :	  400f02:       sub    $0x1,%r14d
    0.03 :	  400f06:       sub    $0x4,%rax
    0.00 :	  400f0a:       cmp    %edx,%ecx
    0.00 :	  400f0c:       jl     400ef8 <sort1+0x6c8>
    0.49 :	  400f0e:       cmp    %r10d,%r14d
    0.00 :	  400f11:       jge    400f35 <sort1+0x705>
    0.13 :	  400f13:       cmp    %r14d,%r9d
    0.00 :	  400f16:       jl     400f47 <sort1+0x717>
    0.12 :	  400f18:       cmp    %r10d,0x50(%rsp)
    0.00 :	  400f1d:       jle    400e38 <sort1+0x608>
    0.13 :	  400f23:       mov    %r10d,%r9d
    0.00 :	  400f26:       mov    0x50(%rsp),%r11d
    0.02 :	  400f2b:       jmpq   400e71 <sort1+0x641>
    0.10 :	  400f30:       cmp    %r14d,%r10d
    0.00 :	  400f33:       jg     400f13 <sort1+0x6e3>
    0.57 :	  400f35:       mov    %edx,(%r8)
    0.64 :	  400f38:       add    $0x1,%r10d
    0.01 :	  400f3c:       sub    $0x1,%r14d
    0.04 :	  400f40:       mov    %esi,(%rdi)
    0.17 :	  400f42:       jmpq   400e91 <sort1+0x661>
    0.09 :	  400f47:       lea    0x1(%r14),%r15d
    0.03 :	  400f4b:       mov    %r10d,0x58(%rsp)
    0.07 :	  400f50:       mov    %r14d,%r10d
    0.00 :	  400f53:       mov    (%rsp),%r14
    0.02 :	  400f57:       lea    (%r15,%r9,1),%eax
    0.01 :	  400f5b:       mov    %r10d,%ebp
    0.01 :	  400f5e:       mov    %r9d,%r13d
    0.01 :	  400f61:       mov    %eax,%edx
    0.01 :	  400f63:       shr    $0x1f,%edx
    0.01 :	  400f66:       add    %edx,%eax
    0.02 :	  400f68:       sar    %eax
    0.01 :	  400f6a:       cltq   
    0.02 :	  400f6c:       mov    (%r14,%rax,4),%ecx
    0.19 :	  400f70:       cmp    %ebp,%r13d
    0.00 :	  400f73:       jg     400ff2 <sort1+0x7c2>
    0.01 :	  400f75:       movslq %r13d,%rax
    0.05 :	  400f78:       shl    $0x2,%rax
    0.12 :	  400f7c:       lea    (%r14,%rax,1),%r8
    0.07 :	  400f80:       mov    (%r8),%esi
    0.14 :	  400f83:       cmp    %r13d,%r15d
    0.00 :	  400f86:       jle    401138 <sort1+0x908>
    0.00 :	  400f8c:       lea    0x4(%r14,%rax,1),%rax
    0.07 :	  400f91:       cmp    %esi,%ecx
    0.16 :	  400f93:       setg   %dl
    0.15 :	  400f96:       test   %dl,%dl
    0.00 :	  400f98:       jne    400fa4 <sort1+0x774>
    0.42 :	  400f9a:       jmpq   401138 <sort1+0x908>
    0.00 :	  400f9f:       nop
    0.00 :	  400fa0:       cmp    %esi,%ecx
    0.00 :	  400fa2:       jle    400fb6 <sort1+0x786>
    0.78 :	  400fa4:       add    $0x1,%r13d
    0.35 :	  400fa8:       mov    %rax,%r8
    0.05 :	  400fab:       mov    (%rax),%esi
    0.36 :	  400fad:       add    $0x4,%rax
    0.10 :	  400fb1:       cmp    %r13d,%r15d
    0.00 :	  400fb4:       jg     400fa0 <sort1+0x770>
    0.52 :	  400fb6:       movslq %ebp,%rax
    0.31 :	  400fb9:       shl    $0x2,%rax
    0.13 :	  400fbd:       lea    (%r14,%rax,1),%rdi
    0.06 :	  400fc1:       mov    (%rdi),%edx
    0.37 :	  400fc3:       cmp    %ebp,%r9d
    0.00 :	  400fc6:       jge    401008 <sort1+0x7d8>
    0.00 :	  400fc8:       cmp    %ecx,%edx
    0.00 :	  400fca:       jle    401008 <sort1+0x7d8>
    0.30 :	  400fcc:       lea    -0x4(%r14,%rax,1),%rax
    0.24 :	  400fd1:       jmp    400fdc <sort1+0x7ac>
    0.00 :	  400fd3:       nopl   0x0(%rax,%rax,1)
    0.00 :	  400fd8:       cmp    %edx,%ecx
    0.00 :	  400fda:       jge    400fed <sort1+0x7bd>
    0.39 :	  400fdc:       sub    $0x1,%ebp
    0.15 :	  400fdf:       mov    %rax,%rdi
    0.02 :	  400fe2:       mov    (%rax),%edx
    0.57 :	  400fe4:       sub    $0x4,%rax
    0.03 :	  400fe8:       cmp    %ebp,%r9d
    0.00 :	  400feb:       jl     400fd8 <sort1+0x7a8>
    0.58 :	  400fed:       cmp    %r13d,%ebp
    0.00 :	  400ff0:       jge    40100d <sort1+0x7dd>
    0.13 :	  400ff2:       cmp    %ebp,%r9d
    0.00 :	  400ff5:       jl     40101e <sort1+0x7ee>
    0.10 :	  400ff7:       cmp    %r13d,%r15d
    0.00 :	  400ffa:       jle    401170 <sort1+0x940>
    0.06 :	  401000:       mov    %r13d,%r9d
    0.00 :	  401003:       jmpq   400f57 <sort1+0x727>
    0.14 :	  401008:       cmp    %ebp,%r13d
    0.00 :	  40100b:       jg     400ff2 <sort1+0x7c2>
    0.55 :	  40100d:       mov    %edx,(%r8)
    0.75 :	  401010:       add    $0x1,%r13d
    0.01 :	  401014:       sub    $0x1,%ebp
    0.03 :	  401017:       mov    %esi,(%rdi)
    0.32 :	  401019:       jmpq   400f70 <sort1+0x740>
    0.08 :	  40101e:       lea    0x1(%rbp),%r12d
    0.05 :	  401022:       lea    (%r12,%r9,1),%eax
    0.02 :	  401026:       mov    %r9d,%ebx
    0.00 :	  401029:       mov    %eax,%edx
    0.00 :	  40102b:       shr    $0x1f,%edx
    0.03 :	  40102e:       add    %edx,%eax
    0.03 :	  401030:       mov    %ebp,%edx
    0.00 :	  401032:       sar    %eax
    0.03 :	  401034:       cltq   
    0.03 :	  401036:       mov    (%r14,%rax,4),%edi
    0.13 :	  40103a:       cmp    %edx,%ebx
    0.00 :	  40103c:       jg     4010c1 <sort1+0x891>
    0.02 :	  401042:       movslq %ebx,%rax
    0.05 :	  401045:       shl    $0x2,%rax
    0.12 :	  401049:       lea    (%r14,%rax,1),%r8
    0.03 :	  40104d:       mov    (%r8),%esi
    0.57 :	  401050:       cmp    %esi,%edi
    0.00 :	  401052:       jle    401106 <sort1+0x8d6>
    0.43 :	  401058:       lea    0x4(%r14,%rax,1),%rax
    0.29 :	  40105d:       cmp    %ebx,%r12d
    0.00 :	  401060:       setg   %cl
    0.00 :	  401063:       test   %cl,%cl
    0.00 :	  401065:       jne    401075 <sort1+0x845>
    0.00 :	  401067:       jmpq   401106 <sort1+0x8d6>
    0.00 :	  40106c:       nopl   0x0(%rax)
    0.46 :	  401070:       cmp    %ebx,%r12d
    0.00 :	  401073:       jle    401085 <sort1+0x855>
    0.23 :	  401075:       mov    (%rax),%esi
    0.53 :	  401077:       mov    %rax,%r8
    0.00 :	  40107a:       add    $0x1,%ebx
    0.02 :	  40107d:       add    $0x4,%rax
    0.01 :	  401081:       cmp    %esi,%edi
    0.00 :	  401083:       jg     401070 <sort1+0x840>
    0.43 :	  401085:       movslq %edx,%rax
    0.25 :	  401088:       shl    $0x2,%rax
    0.08 :	  40108c:       lea    (%r14,%rax,1),%r11
    0.06 :	  401090:       mov    (%r11),%ecx
    0.34 :	  401093:       cmp    %ecx,%edi
    0.00 :	  401095:       jge    4010d7 <sort1+0x8a7>
    0.19 :	  401097:       cmp    %edx,%r9d
    0.00 :	  40109a:       jge    4010d7 <sort1+0x8a7>
    0.19 :	  40109c:       lea    -0x4(%r14,%rax,1),%rax
    0.11 :	  4010a1:       jmp    4010ac <sort1+0x87c>
    0.00 :	  4010a3:       nopl   0x0(%rax,%rax,1)
    0.01 :	  4010a8:       cmp    %ecx,%edi
    0.00 :	  4010aa:       jge    4010bd <sort1+0x88d>
    0.40 :	  4010ac:       sub    $0x1,%edx
    0.17 :	  4010af:       mov    %rax,%r11
    0.02 :	  4010b2:       mov    (%rax),%ecx
    0.41 :	  4010b4:       sub    $0x4,%rax
    0.03 :	  4010b8:       cmp    %edx,%r9d
    0.00 :	  4010bb:       jl     4010a8 <sort1+0x878>
    0.47 :	  4010bd:       cmp    %ebx,%edx
    0.00 :	  4010bf:       jge    4010db <sort1+0x8ab>
    0.14 :	  4010c1:       cmp    %edx,%r9d
    0.00 :	  4010c4:       jl     4010ec <sort1+0x8bc>
    0.10 :	  4010c6:       cmp    %ebx,%r12d
    0.00 :	  4010c9:       jle    400ff7 <sort1+0x7c7>
    0.03 :	  4010cf:       mov    %ebx,%r9d
    0.01 :	  4010d2:       jmpq   401022 <sort1+0x7f2>
    0.14 :	  4010d7:       cmp    %edx,%ebx
    0.00 :	  4010d9:       jg     4010c1 <sort1+0x891>
    0.52 :	  4010db:       mov    %ecx,(%r8)
    0.71 :	  4010de:       add    $0x1,%ebx
    0.00 :	  4010e1:       sub    $0x1,%edx
    0.03 :	  4010e4:       mov    %esi,(%r11)
    0.11 :	  4010e7:       jmpq   40103a <sort1+0x80a>
    0.10 :	  4010ec:       add    $0x1,%edx
    0.04 :	  4010ef:       mov    %r9d,%esi
    0.00 :	  4010f2:       mov    %r14,%rdi
    0.00 :	  4010f5:       mov    %r10d,0x5c(%rsp)
    0.07 :	  4010fa:       callq  400830 <sort1>
    0.01 :	  4010ff:       mov    0x5c(%rsp),%r10d
    0.00 :	  401104:       jmp    4010c6 <sort1+0x896>
    0.37 :	  401106:       movslq %edx,%rax
    0.16 :	  401109:       shl    $0x2,%rax
    0.05 :	  40110d:       lea    (%r14,%rax,1),%r11
    0.03 :	  401111:       mov    (%r11),%ecx
    0.24 :	  401114:       cmp    %ecx,%edi
    0.00 :	  401116:       jge    4010db <sort1+0x8ab>
    0.20 :	  401118:       cmp    %edx,%r9d
    0.00 :	  40111b:       jl     40109c <sort1+0x86c>
    0.00 :	  401121:       mov    %ecx,(%r8)
    0.00 :	  401124:       add    $0x1,%ebx
    0.00 :	  401127:       sub    $0x1,%edx
    0.00 :	  40112a:       mov    %esi,(%r11)
    0.00 :	  40112d:       jmpq   40103a <sort1+0x80a>
    0.00 :	  401132:       nopw   0x0(%rax,%rax,1)
    0.18 :	  401138:       movslq %ebp,%rax
    0.05 :	  40113b:       shl    $0x2,%rax
    0.07 :	  40113f:       lea    (%r14,%rax,1),%rdi
    0.09 :	  401143:       mov    (%rdi),%edx
    0.18 :	  401145:       cmp    %edx,%ecx
    0.00 :	  401147:       jge    40100d <sort1+0x7dd>
    0.14 :	  40114d:       cmp    %ebp,%r9d
    0.00 :	  401150:       jl     400fcc <sort1+0x79c>
    0.00 :	  401156:       mov    %edx,(%r8)
    0.00 :	  401159:       add    $0x1,%r13d
    0.00 :	  40115d:       sub    $0x1,%ebp
    0.00 :	  401160:       mov    %esi,(%rdi)
    0.00 :	  401162:       jmpq   400f70 <sort1+0x740>
    0.00 :	  401167:       nopw   0x0(%rax,%rax,1)
    0.03 :	  401170:       mov    0x58(%rsp),%r10d
    0.05 :	  401175:       jmpq   400f18 <sort1+0x6e8>
    0.20 :	  40117a:       movslq %r14d,%rax
    0.08 :	  40117d:       shl    $0x2,%rax
    0.06 :	  401181:       lea    (%rbx,%rax,1),%rdi
    0.10 :	  401185:       mov    (%rdi),%edx
    0.15 :	  401187:       cmp    %edx,%ecx
    0.00 :	  401189:       jge    400f35 <sort1+0x705>
    0.19 :	  40118f:       cmp    %r14d,%r9d
    0.00 :	  401192:       jl     400eec <sort1+0x6bc>
    0.00 :	  401198:       mov    %edx,(%r8)
    0.00 :	  40119b:       add    $0x1,%r10d
    0.00 :	  40119f:       sub    $0x1,%r14d
    0.00 :	  4011a3:       mov    %esi,(%rdi)
    0.00 :	  4011a5:       jmpq   400e91 <sort1+0x661>
    0.16 :	  4011aa:       movslq %edx,%rax
    0.07 :	  4011ad:       shl    $0x2,%rax
    0.07 :	  4011b1:       lea    0x0(%rbp,%rax,1),%r10
    0.12 :	  4011b6:       mov    (%r10),%edi
    0.15 :	  4011b9:       cmp    %edi,%ecx
    0.00 :	  4011bb:       jge    400e56 <sort1+0x626>
    0.19 :	  4011c1:       cmp    %edx,%r9d
    0.00 :	  4011c4:       jl     400e06 <sort1+0x5d6>
    0.00 :	  4011ca:       mov    %edi,(%r11)
    0.00 :	  4011cd:       add    $0x1,%esi
    0.00 :	  4011d0:       sub    $0x1,%edx
    0.00 :	  4011d3:       mov    %r8d,(%r10)
    0.00 :	  4011d6:       jmpq   400da0 <sort1+0x570>
    0.48 :	  4011db:       movslq %eax,%rsi
    0.24 :	  4011de:       shl    $0x2,%rsi
    0.09 :	  4011e2:       lea    (%r10,%rsi,1),%r8
    0.05 :	  4011e6:       mov    (%r8),%edi
    0.30 :	  4011e9:       cmp    %edi,%ecx
    0.00 :	  4011eb:       jge    400b61 <sort1+0x331>
    0.20 :	  4011f1:       cmp    %eax,%r9d
    0.00 :	  4011f4:       jl     400aff <sort1+0x2cf>
    0.00 :	  4011fa:       jmpq   400b61 <sort1+0x331>
 Percent |	Source code & Disassembly of sort for cycles
------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004019e0 <main>:
         :	static int alloc_vector (int **v, int n);
         :	static int copy_vector (int *v1, int *v2, int n);
         :	static int free_vector (int **v);
         :
         :
         :	int main (int argc, char *argv[]) {
    0.00 :	  4019e0:       push   %r15
    0.00 :	  4019e2:       push   %r14
    0.00 :	  4019e4:       push   %r13
    0.00 :	  4019e6:       push   %r12
    0.00 :	  4019e8:       push   %rbp
    0.00 :	  4019e9:       push   %rbx
    0.00 :	  4019ea:       sub    $0x28,%rsp
         :	  //long long start_usec, end_usec, elapsed_usec, min_usec=0L;
         :
         :	    int *a, *master;//, *b, *master;
         :
         :	  // read parameters
         :	  if (argc != 4) {
    0.00 :	  4019ee:       cmp    $0x4,%edi
    0.00 :	  4019f1:       je     401a22 <main+0x42>
         :	//    fprintf (stdout, "prog algorithm runs size \n");
         :	    fprintf (stdout, "sort int int int \n");
    0.00 :	  4019f3:       mov    $0x12,%edx
    0.00 :	  4019f8:       mov    $0x1,%esi
    0.00 :	  4019fd:       mov    $0x401ccc,%edi
    0.00 :	  401a02:       mov    0x200857(%rip),%rcx        # 602260 <stdout@@GLIBC_2.2.5>
    0.00 :	  401a09:       callq  4006a0 <fwrite@plt>
         :
         :	      return 1;
    0.00 :	  401a0e:       mov    $0x1,%eax
         :	  free_vector (&a);
         :	  free_vector (&master); 
         :
         :	//  printf ("That's all, folks\n");
         :	  return 1;
         :	}
    0.00 :	  401a13:       add    $0x28,%rsp
    0.00 :	  401a17:       pop    %rbx
    0.00 :	  401a18:       pop    %rbp
    0.00 :	  401a19:       pop    %r12
    0.00 :	  401a1b:       pop    %r13
    0.00 :	  401a1d:       pop    %r14
    0.00 :	  401a1f:       pop    %r15
    0.00 :	  401a21:       retq   
         :	  return strtod (__nptr, (char **) NULL);
         :	}
         :	__extern_inline int
         :	__NTH (atoi (__const char *__nptr))
         :	{
         :	  return (int) strtol (__nptr, (char **) NULL, 10);
    0.00 :	  401a22:       mov    0x8(%rsi),%rdi
    0.00 :	  401a26:       mov    %rsi,%rbx
    0.00 :	  401a29:       mov    $0xa,%edx
    0.00 :	  401a2e:       xor    %esi,%esi
    0.00 :	  401a30:       callq  400670 <strtol@plt>
    0.00 :	  401a35:       mov    0x10(%rbx),%rdi
    0.00 :	  401a39:       mov    $0xa,%edx
    0.00 :	  401a3e:       xor    %esi,%esi
    0.00 :	  401a40:       mov    %rax,%r12
    0.00 :	  401a43:       callq  400670 <strtol@plt>
    0.00 :	  401a48:       mov    0x18(%rbx),%rdi
    0.00 :	  401a4c:       mov    $0xa,%edx
    0.00 :	  401a51:       xor    %esi,%esi
    0.00 :	  401a53:       mov    %rax,0x18(%rsp)
    0.00 :	  401a58:       callq  400670 <strtol@plt>
    0.00 :	  401a5d:       mov    %rax,0x8(%rsp)
    0.00 :	  401a62:       mov    %rax,%rbx
    0.00 :	  401a65:       mov    %eax,%r14d
         :
         :	int alloc_vector (int **v, int n) {
         :
         :	        *v = (int *) malloc (n*sizeof(int));
    0.00 :	  401a68:       cltq   
    0.00 :	  401a6a:       shl    $0x2,%rax
    0.00 :	  401a6e:       mov    %rax,%rdi
    0.00 :	  401a71:       mov    %rax,0x10(%rsp)
    0.00 :	  401a76:       callq  400640 <malloc@plt>
    0.00 :	  401a7b:       mov    %rax,%r13
         :	        if (!(*v)) {
    0.00 :	  401a7e:       test   %rax,%rax
    0.00 :	  401a81:       je     401baf <main+0x1cf>
         :	int ini_vector (int **v, int n) {
         :	        int i;
         :	        int *ptr;
         :
         :	        if (!alloc_vector (v, n)) return 0;
         :	        for (i=0 , ptr = (*v) ; i<n ; i++ , ptr++) {
    0.00 :	  401a87:       test   %ebx,%ebx
    0.00 :	  401a89:       jle    401ac8 <main+0xe8>
    0.00 :	  401a8b:       mov    0x8(%rsp),%rax
    0.00 :	  401a90:       mov    %r13,%r15
         :	                *ptr = rand() % 100000000;
    0.00 :	  401a93:       mov    $0x55e63b89,%ebx
    0.00 :	  401a98:       sub    $0x1,%eax
    0.00 :	  401a9b:       lea    0x4(%r13,%rax,4),%rbp
    0.00 :	  401aa0:       callq  4006b0 <rand@plt>
         :	int ini_vector (int **v, int n) {
         :	        int i;
         :	        int *ptr;
         :
         :	        if (!alloc_vector (v, n)) return 0;
         :	        for (i=0 , ptr = (*v) ; i<n ; i++ , ptr++) {
    8.11 :	  401aa5:       add    $0x4,%r15
         :	                *ptr = rand() % 100000000;
    0.06 :	  401aa9:       mov    %eax,%ecx
    0.06 :	  401aab:       imul   %ebx
   24.33 :	  401aad:       mov    %ecx,%eax
    0.00 :	  401aaf:       sar    $0x1f,%eax
    0.00 :	  401ab2:       sar    $0x19,%edx
   10.34 :	  401ab5:       sub    %eax,%edx
    8.11 :	  401ab7:       imul   $0x5f5e100,%edx,%edx
   27.52 :	  401abd:       sub    %edx,%ecx
   10.34 :	  401abf:       mov    %ecx,-0x4(%r15)
         :	int ini_vector (int **v, int n) {
         :	        int i;
         :	        int *ptr;
         :
         :	        if (!alloc_vector (v, n)) return 0;
         :	        for (i=0 , ptr = (*v) ; i<n ; i++ , ptr++) {
   11.11 :	  401ac3:       cmp    %r15,%rbp
    0.00 :	  401ac6:       jne    401aa0 <main+0xc0>
         :	  return 1;
         :	}
         :
         :	int alloc_vector (int **v, int n) {
         :
         :	        *v = (int *) malloc (n*sizeof(int));
    0.00 :	  401ac8:       mov    0x10(%rsp),%rdi
    0.00 :	  401acd:       callq  400640 <malloc@plt>
    0.00 :	  401ad2:       mov    %rax,%rbx
         :	        if (!(*v)) {
    0.00 :	  401ad5:       test   %rax,%rax
    0.00 :	  401ad8:       je     401baf <main+0x1cf>
    0.00 :	  401ade:       mov    0x18(%rsp),%rax
    0.00 :	  401ae3:       mov    %eax,%ebp
         :
         :	  // loop for different lenghts of the vector (n)
         :
         :	// for (n = MIN_ELEM ; n <= MAX_ELEM ; n <<= VEC_SIZE_SHIFT) {
         :
         :	   for (int run=0 ; run < runs ; run++) {
    0.00 :	  401ae5:       test   %eax,%eax
    0.00 :	  401ae7:       jle    401b5b <main+0x17b>
         :
         :	int copy_vector (int *v1, int *v2, int n) {
         :	        int i;
         :
         :	        for (i=0 ; i<n ; i++ , v1++, v2++) {
         :	                *v2 = *v1;
    0.00 :	  401ae9:       mov    0x8(%rsp),%rax
    0.00 :	  401aee:       xor    %r15d,%r15d
    0.00 :	  401af1:       sub    $0x1,%eax
    0.00 :	  401af4:       lea    0x4(,%rax,4),%rax
    0.00 :	  401afc:       mov    %rax,0x8(%rsp)
    0.00 :	  401b01:       jmp    401b29 <main+0x149>
         :	     // copy n elements of master to a
         :	     copy_vector (master, a, arraySize);
         :	  
         :	 //    fprintf (stderr, "run=%d ... ;", run);
         :	       
         :	     switch (alg)
    0.00 :	  401b03:       cmp    $0x3,%r12d
    0.00 :	  401b07:       je     401b9f <main+0x1bf>
    0.00 :	  401b0d:       cmp    $0x4,%r12d
    0.00 :	  401b11:       jne    401b82 <main+0x1a2>
         :	               break;
         :	           case 3:
         :	               sort3(a, arraySize);
         :	               break;
         :	           case 4:
         :	               sort4(a, 0, arraySize);
    0.00 :	  401b13:       mov    %r14d,%edx
    0.00 :	  401b16:       xor    %esi,%esi
    0.00 :	  401b18:       mov    %rbx,%rdi
    0.00 :	  401b1b:       callq  4017f0 <sort4>
         :
         :	  // loop for different lenghts of the vector (n)
         :
         :	// for (n = MIN_ELEM ; n <= MAX_ELEM ; n <<= VEC_SIZE_SHIFT) {
         :
         :	   for (int run=0 ; run < runs ; run++) {
    0.00 :	  401b20:       add    $0x1,%r15d
    0.00 :	  401b24:       cmp    %ebp,%r15d
    0.00 :	  401b27:       je     401b5b <main+0x17b>
         :	}
         :
         :	int copy_vector (int *v1, int *v2, int n) {
         :	        int i;
         :
         :	        for (i=0 ; i<n ; i++ , v1++, v2++) {
    0.00 :	  401b29:       test   %r14d,%r14d
    0.00 :	  401b2c:       jle    401b3e <main+0x15e>
    0.00 :	  401b2e:       mov    0x8(%rsp),%rdx
    0.00 :	  401b33:       mov    %r13,%rsi
    0.00 :	  401b36:       mov    %rbx,%rdi
    0.00 :	  401b39:       callq  400680 <memcpy@plt>
         :	     // copy n elements of master to a
         :	     copy_vector (master, a, arraySize);
         :	  
         :	 //    fprintf (stderr, "run=%d ... ;", run);
         :	       
         :	     switch (alg)
    0.00 :	  401b3e:       cmp    $0x2,%r12d
    0.00 :	  401b42:       je     401b75 <main+0x195>
    0.00 :	  401b44:       jg     401b03 <main+0x123>
    0.00 :	  401b46:       cmp    $0x1,%r12d
    0.00 :	  401b4a:       jne    401b82 <main+0x1a2>
         :	     {
         :	           case 1:
         :	               sort1(a, 0, arraySize);
    0.00 :	  401b4c:       mov    %r14d,%edx
    0.00 :	  401b4f:       xor    %esi,%esi
    0.00 :	  401b51:       mov    %rbx,%rdi
    0.00 :	  401b54:       callq  400830 <sort1>
         :	               break;
    0.00 :	  401b59:       jmp    401b20 <main+0x140>
         :	        }
         :	        return 1;
         :	} 
         :
         :	int free_vector (int **v) {
         :	  free (*v);
    0.00 :	  401b5b:       mov    %rbx,%rdi
    0.00 :	  401b5e:       callq  400660 <free@plt>
    0.00 :	  401b63:       mov    %r13,%rdi
    0.00 :	  401b66:       callq  400660 <free@plt>
         :	  //free_vector (&b);
         :	  free_vector (&a);
         :	  free_vector (&master); 
         :
         :	//  printf ("That's all, folks\n");
         :	  return 1;
    0.00 :	  401b6b:       mov    $0x1,%eax
    0.00 :	  401b70:       jmpq   401a13 <main+0x33>
         :	     {
         :	           case 1:
         :	               sort1(a, 0, arraySize);
         :	               break;
         :	           case 2:
         :	               sort2(a, arraySize);
    0.00 :	  401b75:       mov    %r14d,%esi
    0.00 :	  401b78:       mov    %rbx,%rdi
    0.00 :	  401b7b:       callq  401200 <sort2>
         :	               break;
    0.00 :	  401b80:       jmp    401b20 <main+0x140>
         :	               break;
         :	           case 4:
         :	               sort4(a, 0, arraySize);
         :	               break;
         :	           default:
         :	               fprintf (stderr, "Insert correct option...");
    0.00 :	  401b82:       mov    $0x18,%edx
    0.00 :	  401b87:       mov    $0x1,%esi
    0.00 :	  401b8c:       mov    $0x401cdf,%edi
    0.00 :	  401b91:       mov    0x2006b8(%rip),%rcx        # 602250 <stderr@@GLIBC_2.2.5>
    0.00 :	  401b98:       callq  4006a0 <fwrite@plt>
    0.00 :	  401b9d:       jmp    401b20 <main+0x140>
         :	               break;
         :	           case 2:
         :	               sort2(a, arraySize);
         :	               break;
         :	           case 3:
         :	               sort3(a, arraySize);
    0.00 :	  401b9f:       mov    %r14d,%esi
    0.00 :	  401ba2:       mov    %rbx,%rdi
    0.00 :	  401ba5:       callq  4015f0 <sort3>
         :	               break;
    0.00 :	  401baa:       jmpq   401b20 <main+0x140>
         :
         :	int alloc_vector (int **v, int n) {
         :
         :	        *v = (int *) malloc (n*sizeof(int));
         :	        if (!(*v)) {
         :	                fprintf (stderr, "Could not allocate memory for vector!");
    0.00 :	  401baf:       mov    $0x25,%edx
    0.00 :	  401bb4:       mov    $0x1,%esi
    0.00 :	  401bb9:       mov    $0x401cf8,%edi
    0.00 :	  401bbe:       mov    0x20068b(%rip),%rcx        # 602250 <stderr@@GLIBC_2.2.5>
    0.00 :	  401bc5:       callq  4006a0 <fwrite@plt>
         :	  if (!ini_vector (&master, arraySize)) return 0;
         :	//  fprintf (stdout, "done!\n");
         :
         :	  // alloc sorting vector a
         :	//  fprintf (stdout, "Alloc sort vector ...");
         :	  if (!alloc_vector (&a, arraySize)) return 0;
    0.00 :	  401bca:       xor    %eax,%eax
    0.00 :	  401bcc:       jmpq   401a13 <main+0x33>
 Percent |	Source code & Disassembly of libc-2.12.so for cycles
--------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000003516e36980 <random_r>:
   11.22 :	  3516e36980:   test   %rsi,%rsi
    0.00 :	  3516e36983:   je     3516e36a08 <random_r+0x88>
    0.00 :	  3516e36989:   test   %rdi,%rdi
    0.00 :	  3516e3698c:   je     3516e36a08 <random_r+0x88>
    0.07 :	  3516e3698e:   mov    0x18(%rdi),%edx
    9.50 :	  3516e36991:   mov    0x10(%rdi),%rcx
    0.00 :	  3516e36995:   test   %edx,%edx
    0.00 :	  3516e36997:   je     3516e369e8 <random_r+0x68>
    0.58 :	  3516e36999:   mov    (%rdi),%rdx
    0.29 :	  3516e3699c:   mov    0x8(%rdi),%r8
   12.16 :	  3516e369a0:   mov    0x28(%rdi),%r9
    0.86 :	  3516e369a4:   mov    (%r8),%eax
    1.22 :	  3516e369a7:   add    (%rdx),%eax
    5.54 :	  3516e369a9:   mov    %eax,(%rdx)
   15.47 :	  3516e369ab:   add    $0x4,%rdx
    0.00 :	  3516e369af:   shr    %eax
    0.00 :	  3516e369b1:   cmp    %rdx,%r9
    0.07 :	  3516e369b4:   mov    %eax,(%rsi)
   11.08 :	  3516e369b6:   jbe    3516e369d0 <random_r+0x50>
    0.00 :	  3516e369b8:   lea    0x4(%r8),%rax
    0.00 :	  3516e369bc:   mov    %rdx,(%rdi)
    0.07 :	  3516e369bf:   cmp    %rax,%r9
   10.58 :	  3516e369c2:   cmovbe %rcx,%rax
    0.14 :	  3516e369c6:   mov    %rax,0x8(%rdi)
   15.25 :	  3516e369ca:   xor    %eax,%eax
    0.00 :	  3516e369cc:   retq   
    0.00 :	  3516e369cd:   nopl   (%rax)
    1.15 :	  3516e369d0:   lea    0x4(%r8),%rax
    2.01 :	  3516e369d4:   mov    %rcx,%rdx
    0.36 :	  3516e369d7:   mov    %rdx,(%rdi)
    1.29 :	  3516e369da:   mov    %rax,0x8(%rdi)
    1.08 :	  3516e369de:   xor    %eax,%eax
    0.00 :	  3516e369e0:   retq   
    0.00 :	  3516e369e1:   nopl   0x0(%rax)
    0.00 :	  3516e369e8:   mov    (%rcx),%eax
    0.00 :	  3516e369ea:   imul   $0x41c64e6d,%eax,%eax
    0.00 :	  3516e369f0:   add    $0x3039,%eax
    0.00 :	  3516e369f5:   and    $0x7fffffff,%eax
    0.00 :	  3516e369fa:   mov    %eax,(%rcx)
    0.00 :	  3516e369fc:   mov    %eax,(%rsi)
    0.00 :	  3516e369fe:   xor    %eax,%eax
    0.00 :	  3516e36a00:   retq   
    0.00 :	  3516e36a01:   nopl   0x0(%rax)
    0.00 :	  3516e36a08:   mov    0x356591(%rip),%rax        # 351718cfa0 <_DYNAMIC+0x460>
    0.00 :	  3516e36a0f:   movl   $0x16,%fs:(%rax)
    0.00 :	  3516e36a16:   mov    $0xffffffff,%eax
    0.00 :	  3516e36a1b:   retq   
 Percent |	Source code & Disassembly of libc-2.12.so for cycles
--------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000003516e365b0 <random>:
   18.33 :	  3516e365b0:   sub    $0x18,%rsp
    0.00 :	  3516e365b4:   mov    $0x1,%esi
    0.10 :	  3516e365b9:   xor    %eax,%eax
   13.60 :	  3516e365bb:   cmpl   $0x0,0x35c0ae(%rip)        # 3517192670 <__libc_multiple_threads>
    0.10 :	  3516e365c2:   je     3516e365d4 <random+0x24>
    0.00 :	  3516e365c4:   lock cmpxchg %esi,0x358574(%rip)        # 351718eb40 <lock>
    0.00 :	  3516e365cc:   jne    3516e3678a <_L_lock_10>
    0.00 :	  3516e365d2:   jmp    3516e365e1 <random+0x31>
    0.00 :	  3516e365d4:   cmpxchg %esi,0x358565(%rip)        # 351718eb40 <lock>
   31.23 :	  3516e365db:   jne    3516e3678a <_L_lock_10>
    0.00 :	  3516e365e1:   lea    0x356ed8(%rip),%rdi        # 351718d4c0 <unsafe_state>
    0.10 :	  3516e365e8:   lea    0xc(%rsp),%rsi
    0.30 :	  3516e365ed:   callq  3516e36980 <random_r>
    0.59 :	  3516e365f2:   cmpl   $0x0,0x35c077(%rip)        # 3517192670 <__libc_multiple_threads>
   15.57 :	  3516e365f9:   je     3516e3660a <random+0x5a>
    0.00 :	  3516e365fb:   lock decl 0x35853e(%rip)        # 351718eb40 <lock>
    0.00 :	  3516e36602:   jne    3516e367a9 <_L_unlock_16>
    0.00 :	  3516e36608:   jmp    3516e36616 <random+0x66>
    0.10 :	  3516e3660a:   decl   0x358530(%rip)        # 351718eb40 <lock>
   15.27 :	  3516e36610:   jne    3516e367a9 <_L_unlock_16>
    0.10 :	  3516e36616:   movslq 0xc(%rsp),%rax
    4.63 :	  3516e3661b:   add    $0x18,%rsp
    0.00 :	  3516e3661f:   retq   
 Percent |	Source code & Disassembly of libc-2.12.so for cycles
--------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000003516e89050 <memcpy>:
    0.00 :	  3516e89050:   cmp    $0x20,%rdx
    0.00 :	  3516e89054:   mov    %rdi,%rax
    0.00 :	  3516e89057:   jae    3516e890d0 <memcpy+0x80>
    0.00 :	  3516e89059:   test   $0x1,%dl
    0.00 :	  3516e8905c:   je     3516e89069 <memcpy+0x19>
    0.00 :	  3516e8905e:   movzbl (%rsi),%ecx
    0.00 :	  3516e89061:   mov    %cl,(%rdi)
    0.00 :	  3516e89063:   inc    %rsi
    0.00 :	  3516e89066:   inc    %rdi
    0.00 :	  3516e89069:   test   $0x2,%dl
    0.00 :	  3516e8906c:   je     3516e89080 <memcpy+0x30>
    0.00 :	  3516e8906e:   movzwl (%rsi),%ecx
    0.00 :	  3516e89071:   mov    %cx,(%rdi)
    0.00 :	  3516e89074:   add    $0x2,%rsi
    0.00 :	  3516e89078:   add    $0x2,%rdi
    0.00 :	  3516e8907c:   nopl   0x0(%rax)
    0.00 :	  3516e89080:   test   $0x4,%dl
    0.00 :	  3516e89083:   je     3516e89091 <memcpy+0x41>
    0.00 :	  3516e89085:   mov    (%rsi),%ecx
    0.00 :	  3516e89087:   mov    %ecx,(%rdi)
    0.00 :	  3516e89089:   add    $0x4,%rsi
    0.00 :	  3516e8908d:   add    $0x4,%rdi
    0.00 :	  3516e89091:   test   $0x8,%dl
    0.00 :	  3516e89094:   je     3516e890a4 <memcpy+0x54>
    0.00 :	  3516e89096:   mov    (%rsi),%rcx
    0.00 :	  3516e89099:   mov    %rcx,(%rdi)
    0.00 :	  3516e8909c:   add    $0x8,%rsi
    0.00 :	  3516e890a0:   add    $0x8,%rdi
    0.00 :	  3516e890a4:   and    $0xf0,%edx
    0.00 :	  3516e890aa:   je     3516e890cb <memcpy+0x7b>
    0.00 :	  3516e890ac:   nopl   0x0(%rax)
    0.00 :	  3516e890b0:   mov    (%rsi),%rcx
    0.00 :	  3516e890b3:   mov    0x8(%rsi),%r8
    0.00 :	  3516e890b7:   mov    %rcx,(%rdi)
    0.00 :	  3516e890ba:   mov    %r8,0x8(%rdi)
    0.00 :	  3516e890be:   sub    $0x10,%edx
    0.00 :	  3516e890c1:   lea    0x10(%rsi),%rsi
    0.00 :	  3516e890c5:   lea    0x10(%rdi),%rdi
    0.00 :	  3516e890c9:   jne    3516e890b0 <memcpy+0x60>
    0.00 :	  3516e890cb:   repz retq 
    0.00 :	  3516e890cd:   nopl   (%rax)
    0.00 :	  3516e890d0:   mov    %rax,-0x8(%rsp)
    0.00 :	  3516e890d5:   mov    %esi,%ecx
    0.00 :	  3516e890d7:   and    $0x7,%ecx
    0.00 :	  3516e890da:   je     3516e89110 <memcpy+0xc0>
    0.00 :	  3516e890dc:   lea    -0x8(%rcx,%rdx,1),%rdx
    0.00 :	  3516e890e1:   sub    $0x8,%ecx
    0.00 :	  3516e890e4:   data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  3516e890f0:   movzbl (%rsi),%eax
    0.00 :	  3516e890f3:   mov    %al,(%rdi)
    0.00 :	  3516e890f5:   inc    %ecx
    0.00 :	  3516e890f7:   lea    0x1(%rsi),%rsi
    0.00 :	  3516e890fb:   lea    0x1(%rdi),%rdi
    0.00 :	  3516e890ff:   jne    3516e890f0 <memcpy+0xa0>
    0.00 :	  3516e89101:   data32 data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  3516e89110:   cmp    $0x400,%rdx
    0.00 :	  3516e89117:   ja     3516e89190 <memcpy+0x140>
    0.00 :	  3516e89119:   mov    %edx,%ecx
    0.00 :	  3516e8911b:   shr    $0x5,%ecx
    0.00 :	  3516e8911e:   je     3516e89180 <memcpy+0x130>
    0.00 :	  3516e89120:   dec    %ecx
    0.00 :	  3516e89122:   mov    (%rsi),%rax
    0.00 :	  3516e89125:   mov    0x8(%rsi),%r8
    0.00 :	  3516e89129:   mov    0x10(%rsi),%r9
    0.00 :	  3516e8912d:   mov    0x18(%rsi),%r10
    0.00 :	  3516e89131:   mov    %rax,(%rdi)
    0.00 :	  3516e89134:   mov    %r8,0x8(%rdi)
    0.00 :	  3516e89138:   mov    %r9,0x10(%rdi)
    0.00 :	  3516e8913c:   mov    %r10,0x18(%rdi)
    0.00 :	  3516e89140:   lea    0x20(%rsi),%rsi
    0.00 :	  3516e89144:   lea    0x20(%rdi),%rdi
    0.00 :	  3516e89148:   je     3516e89180 <memcpy+0x130>
    0.00 :	  3516e8914a:   dec    %ecx
    0.00 :	  3516e8914c:   mov    (%rsi),%rax
    0.00 :	  3516e8914f:   mov    0x8(%rsi),%r8
    0.00 :	  3516e89153:   mov    0x10(%rsi),%r9
    0.00 :	  3516e89157:   mov    0x18(%rsi),%r10
    0.00 :	  3516e8915b:   mov    %rax,(%rdi)
    0.00 :	  3516e8915e:   mov    %r8,0x8(%rdi)
    0.00 :	  3516e89162:   mov    %r9,0x10(%rdi)
    0.00 :	  3516e89166:   mov    %r10,0x18(%rdi)
    0.00 :	  3516e8916a:   lea    0x20(%rsi),%rsi
    0.00 :	  3516e8916e:   lea    0x20(%rdi),%rdi
    0.00 :	  3516e89172:   jne    3516e89120 <memcpy+0xd0>
    0.00 :	  3516e89174:   data32 data32 nopw %cs:0x0(%rax,%rax,1)
    0.00 :	  3516e89180:   and    $0x1f,%edx
    0.00 :	  3516e89183:   mov    -0x8(%rsp),%rax
    0.00 :	  3516e89188:   jne    3516e89059 <memcpy+0x9>
    0.00 :	  3516e8918e:   repz retq 
    0.00 :	  3516e89190:   mov    0x303f59(%rip),%r11        # 351718d0f0 <__x86_64_data_cache_size_half>
    0.00 :	  3516e89197:   cmp    %rdx,%r11
    0.00 :	  3516e8919a:   cmova  %rdx,%r11
    0.00 :	  3516e8919e:   mov    %r11,%rcx
    0.00 :	  3516e891a1:   and    $0xfffffffffffffff8,%r11
    0.00 :	  3516e891a5:   shr    $0x3,%rcx
    0.00 :	  3516e891a9:   je     3516e891b0 <memcpy+0x160>
    0.00 :	  3516e891ab:   rep movsq %ds:(%rsi),%es:(%rdi)
    0.00 :	  3516e891ae:   xchg   %ax,%ax
    0.00 :	  3516e891b0:   sub    %r11,%rdx
    0.00 :	  3516e891b3:   test   $0xfffffffffffffff8,%rdx
    0.00 :	  3516e891ba:   jne    3516e891d0 <memcpy+0x180>
    0.00 :	  3516e891bc:   and    $0x7,%edx
    0.00 :	  3516e891bf:   mov    -0x8(%rsp),%rax
    0.00 :	  3516e891c4:   jne    3516e89059 <memcpy+0x9>
    0.00 :	  3516e891ca:   repz retq 
    0.00 :	  3516e891cc:   nopl   0x0(%rax)
    0.00 :	  3516e891d0:   mov    0x303f29(%rip),%r8        # 351718d100 <__x86_64_shared_cache_size_half>
    0.00 :	  3516e891d7:   cmp    %rdx,%r8
    0.00 :	  3516e891da:   cmova  %rdx,%r8
    0.00 :	  3516e891de:   mov    %r8,%rcx
    0.00 :	  3516e891e1:   and    $0xffffffffffffffc0,%r8
    0.00 :	  3516e891e5:   shr    $0x6,%rcx
    0.00 :	  3516e891e9:   je     3516e8939a <memcpy+0x34a>
    0.00 :	  3516e891ef:   mov    %r14,-0x10(%rsp)
    0.00 :	  3516e891f4:   mov    %r13,-0x18(%rsp)
    0.00 :	  3516e891f9:   mov    %r12,-0x20(%rsp)
    0.00 :	  3516e891fe:   mov    %rbx,-0x28(%rsp)
    0.00 :	  3516e89203:   cmpl   $0x0,0x3091c6(%rip)        # 35171923d0 <__x86_64_prefetchw>
    0.00 :	  3516e8920a:   je     3516e892d0 <memcpy+0x280>
    0.00 :	  3516e89210:   dec    %rcx
    0.00 :	  3516e89213:   mov    (%rsi),%rax
    0.00 :	  3516e89216:   mov    0x8(%rsi),%rbx
    0.00 :	  3516e8921a:   mov    0x10(%rsi),%r9
    0.00 :	  3516e8921e:   mov    0x18(%rsi),%r10
    0.00 :	  3516e89222:   mov    0x20(%rsi),%r11
    0.00 :	  3516e89226:   mov    0x28(%rsi),%r12
    0.00 :	  3516e8922a:   mov    0x30(%rsi),%r13
    0.00 :	  3516e8922e:   mov    0x38(%rsi),%r14
    0.00 :	  3516e89232:   prefetcht0 0x380(%rsi)
    0.00 :	  3516e89239:   prefetcht0 0x3c0(%rsi)
    0.00 :	  3516e89240:   mov    %rax,(%rdi)
    0.00 :	  3516e89243:   mov    %rbx,0x8(%rdi)
    0.00 :	  3516e89247:   mov    %r9,0x10(%rdi)
    0.00 :	  3516e8924b:   mov    %r10,0x18(%rdi)
    0.00 :	  3516e8924f:   mov    %r11,0x20(%rdi)
    0.00 :	  3516e89253:   mov    %r12,0x28(%rdi)
    0.00 :	  3516e89257:   mov    %r13,0x30(%rdi)
    0.00 :	  3516e8925b:   mov    %r14,0x38(%rdi)
    0.00 :	  3516e8925f:   lea    0x40(%rsi),%rsi
    0.00 :	  3516e89263:   lea    0x40(%rdi),%rdi
    0.00 :	  3516e89267:   je     3516e89386 <memcpy+0x336>
    0.00 :	  3516e8926d:   dec    %rcx
    0.00 :	  3516e89270:   mov    (%rsi),%rax
    0.00 :	  3516e89273:   mov    0x8(%rsi),%rbx
    0.00 :	  3516e89277:   mov    0x10(%rsi),%r9
    0.00 :	  3516e8927b:   mov    0x18(%rsi),%r10
    0.00 :	  3516e8927f:   mov    0x20(%rsi),%r11
    0.00 :	  3516e89283:   mov    0x28(%rsi),%r12
    0.00 :	  3516e89287:   mov    0x30(%rsi),%r13
    0.00 :	  3516e8928b:   mov    0x38(%rsi),%r14
    0.00 :	  3516e8928f:   mov    %rax,(%rdi)
    0.00 :	  3516e89292:   mov    %rbx,0x8(%rdi)
    0.00 :	  3516e89296:   mov    %r9,0x10(%rdi)
    0.00 :	  3516e8929a:   mov    %r10,0x18(%rdi)
    0.00 :	  3516e8929e:   mov    %r11,0x20(%rdi)
    0.00 :	  3516e892a2:   mov    %r12,0x28(%rdi)
    0.00 :	  3516e892a6:   mov    %r13,0x30(%rdi)
    0.00 :	  3516e892aa:   mov    %r14,0x38(%rdi)
    0.00 :	  3516e892ae:   prefetchw 0x340(%rdi)
    0.00 :	  3516e892b5:   prefetchw 0x380(%rdi)
    0.00 :	  3516e892bc:   lea    0x40(%rsi),%rsi
    0.00 :	  3516e892c0:   lea    0x40(%rdi),%rdi
    0.00 :	  3516e892c4:   jne    3516e89210 <memcpy+0x1c0>
    0.00 :	  3516e892ca:   jmpq   3516e89386 <memcpy+0x336>
    0.00 :	  3516e892cf:   nop
    0.00 :	  3516e892d0:   dec    %rcx
    0.00 :	  3516e892d3:   mov    (%rsi),%rax
    0.00 :	  3516e892d6:   mov    0x8(%rsi),%rbx
    0.00 :	  3516e892da:   mov    0x10(%rsi),%r9
    0.00 :	  3516e892de:   mov    0x18(%rsi),%r10
    0.00 :	  3516e892e2:   mov    0x20(%rsi),%r11
    0.00 :	  3516e892e6:   mov    0x28(%rsi),%r12
    0.00 :	  3516e892ea:   mov    0x30(%rsi),%r13
    0.00 :	  3516e892ee:   mov    0x38(%rsi),%r14
    0.00 :	  3516e892f2:   prefetcht0 0x380(%rsi)
    0.00 :	  3516e892f9:   prefetcht0 0x3c0(%rsi)
    0.00 :	  3516e89300:   mov    %rax,(%rdi)
    0.23 :	  3516e89303:   mov    %rbx,0x8(%rdi)
    0.00 :	  3516e89307:   mov    %r9,0x10(%rdi)
    0.00 :	  3516e8930b:   mov    %r10,0x18(%rdi)
    0.00 :	  3516e8930f:   mov    %r11,0x20(%rdi)
    0.00 :	  3516e89313:   mov    %r12,0x28(%rdi)
    0.00 :	  3516e89317:   mov    %r13,0x30(%rdi)
    0.00 :	  3516e8931b:   mov    %r14,0x38(%rdi)
    0.00 :	  3516e8931f:   lea    0x40(%rsi),%rsi
    0.00 :	  3516e89323:   lea    0x40(%rdi),%rdi
    0.00 :	  3516e89327:   je     3516e89386 <memcpy+0x336>
    0.00 :	  3516e89329:   dec    %rcx
    0.00 :	  3516e8932c:   mov    (%rsi),%rax
    0.00 :	  3516e8932f:   mov    0x8(%rsi),%rbx
    0.00 :	  3516e89333:   mov    0x10(%rsi),%r9
    0.00 :	  3516e89337:   mov    0x18(%rsi),%r10
    0.00 :	  3516e8933b:   mov    0x20(%rsi),%r11
    0.00 :	  3516e8933f:   mov    0x28(%rsi),%r12
    0.00 :	  3516e89343:   mov    0x30(%rsi),%r13
    0.00 :	  3516e89347:   mov    0x38(%rsi),%r14
    0.00 :	  3516e8934b:   prefetcht0 0x340(%rdi)
    0.00 :	  3516e89352:   prefetcht0 0x380(%rdi)
    0.00 :	  3516e89359:   mov    %rax,(%rdi)
    0.00 :	  3516e8935c:   mov    %rbx,0x8(%rdi)
    0.00 :	  3516e89360:   mov    %r9,0x10(%rdi)
    0.00 :	  3516e89364:   mov    %r10,0x18(%rdi)
    0.00 :	  3516e89368:   mov    %r11,0x20(%rdi)
    0.00 :	  3516e8936c:   mov    %r12,0x28(%rdi)
    0.00 :	  3516e89370:   mov    %r13,0x30(%rdi)
    0.00 :	  3516e89374:   mov    %r14,0x38(%rdi)
    0.00 :	  3516e89378:   lea    0x40(%rsi),%rsi
    0.00 :	  3516e8937c:   lea    0x40(%rdi),%rdi
    0.00 :	  3516e89380:   jne    3516e892d0 <memcpy+0x280>
    0.00 :	  3516e89386:   mov    -0x28(%rsp),%rbx
    0.00 :	  3516e8938b:   mov    -0x20(%rsp),%r12
    0.00 :	  3516e89390:   mov    -0x18(%rsp),%r13
    0.00 :	  3516e89395:   mov    -0x10(%rsp),%r14
    0.00 :	  3516e8939a:   sub    %r8,%rdx
    0.00 :	  3516e8939d:   test   $0xffffffffffffffc0,%rdx
    0.00 :	  3516e893a4:   jne    3516e893c0 <memcpy+0x370>
    0.00 :	  3516e893a6:   and    $0x3f,%edx
    0.00 :	  3516e893a9:   mov    -0x8(%rsp),%rax
    0.00 :	  3516e893ae:   jne    3516e89059 <memcpy+0x9>
    0.00 :	  3516e893b4:   repz retq 
    0.00 :	  3516e893b6:   nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  3516e893c0:   mov    %rdx,%rcx
    0.00 :	  3516e893c3:   shr    $0x7,%rcx
    0.00 :	  3516e893c7:   je     3516e894a5 <memcpy+0x455>
    0.00 :	  3516e893cd:   mov    %r14,-0x10(%rsp)
    0.00 :	  3516e893d2:   mov    %r13,-0x18(%rsp)
    0.00 :	  3516e893d7:   mov    %r12,-0x20(%rsp)
    0.00 :	  3516e893dc:   nopl   0x0(%rax)
    0.46 :	  3516e893e0:   prefetchnta 0x300(%rsi)
   26.15 :	  3516e893e7:   prefetchnta 0x340(%rsi)
   24.54 :	  3516e893ee:   dec    %rcx
    0.00 :	  3516e893f1:   mov    (%rsi),%rax
    0.23 :	  3516e893f4:   mov    0x8(%rsi),%r8
    0.23 :	  3516e893f8:   mov    0x10(%rsi),%r9
    1.15 :	  3516e893fc:   mov    0x18(%rsi),%r10
    0.00 :	  3516e89400:   mov    0x20(%rsi),%r11
    0.00 :	  3516e89404:   mov    0x28(%rsi),%r12
    2.75 :	  3516e89408:   mov    0x30(%rsi),%r13
    0.69 :	  3516e8940c:   mov    0x38(%rsi),%r14
    0.00 :	  3516e89410:   movnti %rax,(%rdi)
    2.06 :	  3516e89414:   movnti %r8,0x8(%rdi)
    2.06 :	  3516e89419:   movnti %r9,0x10(%rdi)
   10.09 :	  3516e8941e:   movnti %r10,0x18(%rdi)
    1.38 :	  3516e89423:   movnti %r11,0x20(%rdi)
    2.06 :	  3516e89428:   movnti %r12,0x28(%rdi)
    1.83 :	  3516e8942d:   movnti %r13,0x30(%rdi)
    2.06 :	  3516e89432:   movnti %r14,0x38(%rdi)
    1.61 :	  3516e89437:   mov    0x40(%rsi),%rax
    0.23 :	  3516e8943b:   mov    0x48(%rsi),%r8
    0.00 :	  3516e8943f:   mov    0x50(%rsi),%r9
    0.23 :	  3516e89443:   mov    0x58(%rsi),%r10
    0.00 :	  3516e89447:   mov    0x60(%rsi),%r11
    0.00 :	  3516e8944b:   mov    0x68(%rsi),%r12
    2.75 :	  3516e8944f:   mov    0x70(%rsi),%r13
    0.92 :	  3516e89453:   mov    0x78(%rsi),%r14
    0.46 :	  3516e89457:   movnti %rax,0x40(%rdi)
    4.13 :	  3516e8945c:   movnti %r8,0x48(%rdi)
    1.38 :	  3516e89461:   movnti %r9,0x50(%rdi)
    0.69 :	  3516e89466:   movnti %r10,0x58(%rdi)
    1.61 :	  3516e8946b:   movnti %r11,0x60(%rdi)
    3.44 :	  3516e89470:   movnti %r12,0x68(%rdi)
    1.38 :	  3516e89475:   movnti %r13,0x70(%rdi)
    2.29 :	  3516e8947a:   movnti %r14,0x78(%rdi)
    0.69 :	  3516e8947f:   lea    0x80(%rsi),%rsi
    0.00 :	  3516e89486:   lea    0x80(%rdi),%rdi
    0.23 :	  3516e8948d:   jne    3516e893e0 <memcpy+0x390>
    0.00 :	  3516e89493:   sfence 
    0.00 :	  3516e89496:   mov    -0x20(%rsp),%r12
    0.00 :	  3516e8949b:   mov    -0x18(%rsp),%r13
    0.00 :	  3516e894a0:   mov    -0x10(%rsp),%r14
    0.00 :	  3516e894a5:   and    $0x7f,%edx
    0.00 :	  3516e894a8:   mov    -0x8(%rsp),%rax
    0.00 :	  3516e894ad:   jne    3516e89059 <memcpy+0x9>
    0.00 :	  3516e894b3:   repz retq 
 Percent |	Source code & Disassembly of libc-2.12.so for cycles
--------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000003516e36c60 <rand>:
   42.86 :	  3516e36c60:   sub    $0x8,%rsp
    0.00 :	  3516e36c64:   callq  3516e365b0 <random>
   45.19 :	  3516e36c69:   add    $0x8,%rsp
   11.95 :	  3516e36c6d:   retq   
 Percent |	Source code & Disassembly of sort for cycles
------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .plt:
         :
         :	00000000004006b0 <rand@plt>:
  100.00 :	  4006b0:       jmpq   *0x201b7a(%rip)        # 602230 <_GLOBAL_OFFSET_TABLE_+0x50>
    0.00 :	  4006b6:       pushq  $0x7
    0.00 :	  4006bb:       jmpq   400630 <_init+0x18>
 Percent |	Source code & Disassembly of [mx_driver] for cycles
-------------------------------------------------------------------
 Percent |	Source code & Disassembly of nfs.ko for cycles
--------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000019a80 <nfs_clear_request_commit>:
    0.00 :	  19a80:       push   %rbp
    0.00 :	  19a81:       mov    %rsp,%rbp
    0.00 :	  19a84:       push   %rbx
    0.00 :	  19a85:       sub    $0x8,%rsp
    0.00 :	  19a89:       callq  19a8e <nfs_clear_request_commit+0xe>
    0.00 :	  19a8e:       mov    0x10(%rdi),%rbx
    0.00 :	  19a92:       lock btrl $0x2,0x48(%rdi)
  100.00 :	  19a98:       sbb    %edx,%edx
    0.00 :	  19a9a:       xor    %eax,%eax
    0.00 :	  19a9c:       test   %edx,%edx
    0.00 :	  19a9e:       je     19afb <nfs_clear_request_commit+0x7b>
    0.00 :	  19aa0:       mov    %rbx,%rdi
    0.00 :	  19aa3:       mov    $0x10,%esi
    0.00 :	  19aa8:       callq  19aad <nfs_clear_request_commit+0x2d>
    0.00 :	  19aad:       mov    0x18(%rbx),%rax
    0.00 :	  19ab1:       mov    0x68(%rax),%rdi
    0.00 :	  19ab5:       callq  *0x0
    0.00 :	  19abc:       mov    %rax,%rbx
    0.00 :	  19abf:       callq  *0x0
    0.00 :	  19ac6:       mov    $0xffffffff,%eax
    0.00 :	  19acb:       add    $0x60,%rdi
    0.00 :	  19acf:       mov    $0xffffffffffffffff,%rsi
    0.00 :	  19ad6:       bsr    0x0(%rip),%edx        # 19add <nfs_clear_request_commit+0x5d>
    0.00 :	  19add:       cmove  %eax,%edx
    0.00 :	  19ae0:       lea    0x8(,%rdx,8),%edx
    0.00 :	  19ae7:       callq  19aec <nfs_clear_request_commit+0x6c>
    0.00 :	  19aec:       mov    %rbx,%rdi
    0.00 :	  19aef:       callq  *0x0
    0.00 :	  19af6:       mov    $0x1,%eax
    0.00 :	  19afb:       add    $0x8,%rsp
    0.00 :	  19aff:       pop    %rbx
    0.00 :	  19b00:       leaveq 
    0.00 :	  19b01:       retq   
 Percent |	Source code & Disassembly of ld-2.12.so for cycles
------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000003516a0b2f0 <_dl_relocate_object>:
    0.00 :	  3516a0b2f0:   push   %rbp
    0.00 :	  3516a0b2f1:   mov    %rsp,%rbp
    0.00 :	  3516a0b2f4:   push   %r15
    0.00 :	  3516a0b2f6:   push   %r14
    0.00 :	  3516a0b2f8:   push   %r13
    0.00 :	  3516a0b2fa:   push   %r12
    0.00 :	  3516a0b2fc:   mov    %edx,%r12d
    0.00 :	  3516a0b2ff:   and    $0x1,%r12d
    0.00 :	  3516a0b303:   push   %rbx
    0.00 :	  3516a0b304:   mov    %rdi,%rbx
    0.00 :	  3516a0b307:   sub    $0xb8,%rsp
    0.00 :	  3516a0b30e:   and    $0x8000000,%edx
    0.00 :	  3516a0b314:   mov    %rsi,-0xa0(%rbp)
    0.00 :	  3516a0b31b:   mov    %ecx,-0xb4(%rbp)
    0.00 :	  3516a0b321:   jne    3516a0b338 <_dl_relocate_object+0x48>
    0.00 :	  3516a0b323:   xor    %eax,%eax
    0.00 :	  3516a0b325:   cmpq   $0x0,0x21497b(%rip)        # 3516c1fca8 <_rtld_global_ro+0x108>
    0.00 :	  3516a0b32d:   setne  %al
    0.00 :	  3516a0b330:   or     %eax,%ecx
    0.00 :	  3516a0b332:   mov    %ecx,-0xb4(%rbp)
    0.00 :	  3516a0b338:   testb  $0x4,0x314(%rbx)
    0.00 :	  3516a0b33f:   jne    3516a0b708 <_dl_relocate_object+0x418>
    0.00 :	  3516a0b345:   mov    -0xb4(%rbp),%esi
    0.00 :	  3516a0b34b:   test   %esi,%esi
    0.00 :	  3516a0b34d:   je     3516a0b798 <_dl_relocate_object+0x4a8>
    0.00 :	  3516a0b353:   testb  $0x20,0x214846(%rip)        # 3516c1fba0 <_rtld_global_ro>
    0.00 :	  3516a0b35a:   jne    3516a0be87 <_dl_relocate_object+0xb97>
    0.00 :	  3516a0b360:   cmpq   $0x0,0xf0(%rbx)
    0.00 :	  3516a0b368:   jne    3516a0bf37 <_dl_relocate_object+0xc47>
    0.00 :	  3516a0b36e:   movq   $0x0,-0xc8(%rbp)
    0.00 :	  3516a0b379:   mov    0x68(%rbx),%rax
    0.00 :	  3516a0b37d:   test   %r12b,%r12b
    0.00 :	  3516a0b380:   mov    %r12d,%r13d
    0.00 :	  3516a0b383:   mov    0x8(%rax),%rax
    0.00 :	  3516a0b387:   mov    %rax,-0xa8(%rbp)
    0.00 :	  3516a0b38e:   jne    3516a0b740 <_dl_relocate_object+0x450>
    0.00 :	  3516a0b394:   test   %r13b,%r13b
    0.00 :	  3516a0b397:   mov    0x288(%rbx),%rax
    0.00 :	  3516a0b39e:   jne    3516a0b720 <_dl_relocate_object+0x430>
    0.00 :	  3516a0b3a4:   mov    0x78(%rbx),%rdx
    0.00 :	  3516a0b3a8:   xor    %eax,%eax
    0.00 :	  3516a0b3aa:   xor    %ecx,%ecx
    0.00 :	  3516a0b3ac:   movl   $0x0,-0x60(%rbp)
    0.00 :	  3516a0b3b3:   movq   $0x0,-0x50(%rbp)
    0.00 :	  3516a0b3bb:   movq   $0x0,-0x68(%rbp)
    0.00 :	  3516a0b3c3:   movq   $0x0,-0x70(%rbp)
    0.00 :	  3516a0b3cb:   test   %rdx,%rdx
    0.00 :	  3516a0b3ce:   je     3516a0b3e7 <_dl_relocate_object+0xf7>
    0.00 :	  3516a0b3d0:   mov    0x8(%rdx),%rcx
    0.00 :	  3516a0b3d4:   mov    0x80(%rbx),%rax
    0.00 :	  3516a0b3db:   mov    %rcx,-0x70(%rbp)
    0.00 :	  3516a0b3df:   mov    0x8(%rax),%rax
    0.00 :	  3516a0b3e3:   mov    %rax,-0x68(%rbp)
    0.00 :	  3516a0b3e7:   cmpq   $0x0,0xe0(%rbx)
    0.00 :	  3516a0b3ef:   je     3516a0bd7a <_dl_relocate_object+0xa8a>
    0.00 :	  3516a0b3f5:   mov    0xf8(%rbx),%rdx
    0.00 :	  3516a0b3fc:   test   %r12d,%r12d
    0.00 :	  3516a0b3ff:   mov    0x8(%rdx),%rdx
    0.00 :	  3516a0b403:   je     3516a0b7b0 <_dl_relocate_object+0x4c0>
    0.00 :	  3516a0b409:   mov    0x50(%rbx),%rax
    0.00 :	  3516a0b40d:   mov    %rdx,-0x58(%rbp)
    0.00 :	  3516a0b411:   mov    -0x70(%rbp),%rcx
    0.00 :	  3516a0b415:   mov    -0x60(%rbp),%edx
    0.00 :	  3516a0b418:   mov    0x8(%rax),%rax
    0.00 :	  3516a0b41c:   mov    %r12d,-0x48(%rbp)
    0.00 :	  3516a0b420:   mov    %rax,-0x50(%rbp)
    0.00 :	  3516a0b424:   mov    -0x68(%rbp),%rax
    0.00 :	  3516a0b428:   lea    -0x70(%rbp),%rsi
    0.00 :	  3516a0b42c:   mov    %rcx,%r14
    0.00 :	  3516a0b42f:   lea    (%rcx,%rax,1),%r10
    0.00 :	  3516a0b433:   mov    (%rbx),%r12
    0.00 :	  3516a0b436:   lea    0x20(%rsi),%rdi
    0.00 :	  3516a0b43a:   add    $0x38,%rsi
    0.00 :	  3516a0b43e:   test   %edx,%edx
    0.00 :	  3516a0b440:   mov    %rsi,-0xc0(%rbp)
    0.00 :	  3516a0b447:   lea    -0x38(%rbp),%rsi
    0.00 :	  3516a0b44b:   mov    %rdi,-0x78(%rbp)
    0.00 :	  3516a0b44f:   mov    %rsi,-0xb0(%rbp)
    0.00 :	  3516a0b456:   je     3516a0b4cc <_dl_relocate_object+0x1dc>
    0.00 :	  3516a0b458:   cmp    %r10,%rcx
    0.00 :	  3516a0b45b:   jae    3516a0b491 <_dl_relocate_object+0x1a1>
    0.00 :	  3516a0b45d:   nopl   (%rax)
    0.00 :	  3516a0b460:   mov    0x8(%r14),%esi
    0.00 :	  3516a0b464:   mov    %r12,%r13
    0.00 :	  3516a0b467:   add    (%r14),%r13
    0.00 :	  3516a0b46a:   cmp    $0x7,%rsi
    0.00 :	  3516a0b46e:   jne    3516a0bdb3 <_dl_relocate_object+0xac3>
    0.00 :	  3516a0b474:   mov    0x3e0(%rbx),%rax
    0.00 :	  3516a0b47b:   test   %rax,%rax
    0.00 :	  3516a0b47e:   jne    3516a0bdd8 <_dl_relocate_object+0xae8>
    0.00 :	  3516a0b484:   add    %r12,0x0(%r13)
    0.00 :	  3516a0b488:   add    $0x18,%r14
    0.00 :	  3516a0b48c:   cmp    %r14,%r10
    0.00 :	  3516a0b48f:   ja     3516a0b460 <_dl_relocate_object+0x170>
    0.00 :	  3516a0b491:   mov    -0xc0(%rbp),%rdi
    0.00 :	  3516a0b498:   cmp    %rdi,-0x78(%rbp)
    0.00 :	  3516a0b49c:   je     3516a0b6ce <_dl_relocate_object+0x3de>
    0.00 :	  3516a0b4a2:   mov    -0x78(%rbp),%rdx
    0.00 :	  3516a0b4a6:   mov    (%rbx),%r12
    0.00 :	  3516a0b4a9:   mov    %rdx,%rcx
    0.00 :	  3516a0b4ac:   mov    (%rdx),%rax
    0.00 :	  3516a0b4af:   mov    0x8(%rdx),%edx
    0.00 :	  3516a0b4b2:   mov    %rcx,%rsi
    0.00 :	  3516a0b4b5:   mov    -0x8(%rcx),%rcx
    0.00 :	  3516a0b4b9:   add    $0x18,%rsi
    0.00 :	  3516a0b4bd:   test   %edx,%edx
    0.00 :	  3516a0b4bf:   mov    %rsi,-0x78(%rbp)
    0.00 :	  3516a0b4c3:   mov    %rcx,%r14
    0.00 :	  3516a0b4c6:   lea    (%rcx,%rax,1),%r10
    0.00 :	  3516a0b4ca:   jne    3516a0b458 <_dl_relocate_object+0x168>
    0.00 :	  3516a0b4cc:   mov    0x70(%rbx),%rdx
    0.00 :	  3516a0b4d0:   xor    %r13d,%r13d
    0.00 :	  3516a0b4d3:   mov    0x8(%rdx),%rdx
    0.00 :	  3516a0b4d7:   mov    %rdx,-0x80(%rbp)
    0.00 :	  3516a0b4db:   mov    0x180(%rbx),%rdx
    0.00 :	  3516a0b4e2:   test   %rdx,%rdx
    0.00 :	  3516a0b4e5:   je     3516a0b50a <_dl_relocate_object+0x21a>
    0.00 :	  3516a0b4e7:   mov    0x8(%rdx),%esi
    0.00 :	  3516a0b4ea:   mov    $0xaaaaaaaaaaaaaaab,%rdx
    0.00 :	  3516a0b4f4:   mul    %rdx
    0.00 :	  3516a0b4f7:   shr    $0x4,%rdx
    0.00 :	  3516a0b4fb:   cmp    %rsi,%rdx
    0.00 :	  3516a0b4fe:   cmova  %rsi,%rdx
    0.00 :	  3516a0b502:   lea    (%rdx,%rdx,2),%r13
    0.00 :	  3516a0b506:   shl    $0x3,%r13
    0.00 :	  3516a0b50a:   lea    0x215487(%rip),%rax        # 3516c20998 <_rtld_global+0x998>
    0.00 :	  3516a0b511:   lea    (%rcx,%r13,1),%r13
    0.00 :	  3516a0b515:   cmp    %rax,%rbx
    0.00 :	  3516a0b518:   je     3516a0b531 <_dl_relocate_object+0x241>
    0.00 :	  3516a0b51a:   test   %r12,%r12
    0.00 :	  3516a0b51d:   jne    3516a0ba20 <_dl_relocate_object+0x730>
    0.00 :	  3516a0b523:   cmpq   $0x0,0x238(%rbx)
    0.00 :	  3516a0b52b:   je     3516a0ba20 <_dl_relocate_object+0x730>
    0.00 :	  3516a0b531:   mov    0x1c8(%rbx),%rax
    0.00 :	  3516a0b538:   test   %rax,%rax
    0.00 :	  3516a0b53b:   je     3516a0ba57 <_dl_relocate_object+0x767>
    0.00 :	  3516a0b541:   mov    0x8(%rax),%rax
    0.00 :	  3516a0b545:   cmp    %r13,%r10
    0.00 :	  3516a0b548:   mov    %rax,-0x88(%rbp)
    0.00 :	  3516a0b54f:   jbe    3516a0b491 <_dl_relocate_object+0x1a1>
    0.00 :	  3516a0b555:   mov    %r10,-0x98(%rbp)
    0.00 :	  3516a0b55c:   mov    %r12,-0x90(%rbp)
    0.00 :	  3516a0b563:   nopl   0x0(%rax,%rax,1)
    0.00 :	  3516a0b568:   mov    0x8(%r13),%r14
    0.00 :	  3516a0b56c:   mov    -0x88(%rbp),%rdx
    0.00 :	  3516a0b573:   mov    -0x80(%rbp),%rcx
    0.00 :	  3516a0b577:   mov    -0x90(%rbp),%r15
    0.00 :	  3516a0b57e:   add    0x0(%r13),%r15
    0.00 :	  3516a0b582:   mov    0x2e0(%rbx),%rsi
    0.00 :	  3516a0b589:   mov    %r14,%rax
    0.00 :	  3516a0b58c:   and    $0xffffffffffffffff,%r14d
    0.00 :	  3516a0b590:   shr    $0x20,%rax
    0.00 :	  3516a0b594:   cmp    $0x8,%r14
    0.00 :	  3516a0b598:   movzwl (%rdx,%rax,2),%edi
    0.00 :	  3516a0b59c:   lea    (%rax,%rax,2),%rax
    0.00 :	  3516a0b5a0:   lea    (%rcx,%rax,8),%r12
    0.00 :	  3516a0b5a4:   mov    %r12,-0x38(%rbp)
    0.00 :	  3516a0b5a8:   je     3516a0bdef <_dl_relocate_object+0xaff>
    0.00 :	  3516a0b5ae:   test   %r14,%r14
    0.00 :	  3516a0b5b1:   je     3516a0b820 <_dl_relocate_object+0x530>
    0.00 :	  3516a0b5b7:   movzbl 0x4(%r12),%ecx
    0.00 :	  3516a0b5bd:   mov    %r12,%rax
    0.00 :	  3516a0b5c0:   mov    %rbx,%rdx
    0.00 :	  3516a0b5c3:   shr    $0x4,%cl
    0.00 :	  3516a0b5c6:   test   %cl,%cl
    0.00 :	  3516a0b5c8:   je     3516a0b699 <_dl_relocate_object+0x3a9>
    0.00 :	  3516a0b5ce:   cmp    0x3f8(%rbx),%r12
    0.00 :	  3516a0b5d5:   je     3516a0bdfe <_dl_relocate_object+0xb0e>
    0.00 :	  3516a0b5db:   cmp    $0x10,%r14
    0.00 :	  3516a0b5df:   sete   %al
    0.00 :	  3516a0b5e2:   cmp    $0x7,%r14
    0.00 :	  3516a0b5e6:   sete   %dl
    0.00 :	  3516a0b5e9:   or     %edx,%eax
    0.00 :	  3516a0b5eb:   test   %al,%al
    0.00 :	  3516a0b5ed:   jne    3516a0ba10 <_dl_relocate_object+0x720>
    0.00 :	  3516a0b5f3:   cmp    $0x12,%r14
    0.00 :	  3516a0b5f7:   je     3516a0ba10 <_dl_relocate_object+0x720>
    0.00 :	  3516a0b5fd:   cmp    $0x11,%r14
    0.00 :	  3516a0b601:   je     3516a0ba10 <_dl_relocate_object+0x720>
    0.00 :	  3516a0b607:   xor    %eax,%eax
    0.00 :	  3516a0b609:   cmp    $0x24,%r14
    0.00 :	  3516a0b60d:   sete   %al
    0.00 :	  3516a0b610:   xor    %r9d,%r9d
    0.00 :	  3516a0b613:   cmp    $0x5,%r14
    0.00 :	  3516a0b617:   sete   %r9b
    0.00 :	  3516a0b61b:   and    $0x7fff,%edi
    0.00 :	  3516a0b621:   lea    (%rdi,%rdi,2),%rdx
    0.00 :	  3516a0b625:   add    %r9d,%r9d
    0.00 :	  3516a0b628:   or     %eax,%r9d
    0.00 :	  3516a0b62b:   mov    -0x38(%rbp),%rax
    0.00 :	  3516a0b62f:   lea    (%rsi,%rdx,8),%r8
    0.00 :	  3516a0b633:   mov    %r9d,0x400(%rbx)
    0.00 :	  3516a0b63a:   test   %r8,%r8
    0.00 :	  3516a0b63d:   mov    %rax,0x3f8(%rbx)
    0.00 :	  3516a0b644:   je     3516a0b655 <_dl_relocate_object+0x365>
    0.00 :	  3516a0b646:   mov    0x8(%r8),%edx
    0.00 :	  3516a0b64a:   mov    $0x0,%esi
    0.00 :	  3516a0b64f:   test   %edx,%edx
    0.00 :	  3516a0b651:   cmove  %rsi,%r8
    0.00 :	  3516a0b655:   mov    (%rax),%edi
    0.00 :	  3516a0b657:   mov    -0xb0(%rbp),%rdx
    0.00 :	  3516a0b65e:   mov    %rbx,%rsi
    0.00 :	  3516a0b661:   add    -0xa8(%rbp),%rdi
    0.00 :	  3516a0b668:   mov    -0xa0(%rbp),%rcx
    0.00 :	  3516a0b66f:   movq   $0x0,0x8(%rsp)
    0.00 :	  3516a0b678:   movl   $0x1,(%rsp)
    0.00 :	  3516a0b67f:   callq  3516a09cf0 <_dl_lookup_symbol_x>
    0.00 :	  3516a0b684:   mov    %rax,%rdx
    0.00 :	  3516a0b687:   mov    -0x38(%rbp),%rax
    0.00 :	  3516a0b68b:   mov    %rdx,0x408(%rbx)
    0.00 :	  3516a0b692:   mov    %rax,0x410(%rbx)
    0.00 :	  3516a0b699:   xor    %esi,%esi
    0.00 :	  3516a0b69b:   test   %rax,%rax
    0.00 :	  3516a0b69e:   je     3516a0b6b7 <_dl_relocate_object+0x3c7>
  100.00 :	  3516a0b6a0:   movzbl 0x4(%rax),%ecx
    0.00 :	  3516a0b6a4:   mov    0x8(%rax),%rsi
    0.00 :	  3516a0b6a8:   add    (%rdx),%rsi
    0.00 :	  3516a0b6ab:   and    $0xf,%ecx
    0.00 :	  3516a0b6ae:   cmp    $0xa,%ecx
    0.00 :	  3516a0b6b1:   je     3516a0be5d <_dl_relocate_object+0xb6d>
    0.00 :	  3516a0b6b7:   cmp    $0x25,%r14
    0.00 :	  3516a0b6bb:   jbe    3516a0b840 <_dl_relocate_object+0x550>
    0.00 :	  3516a0b6c1:   xor    %edx,%edx
    0.00 :	  3516a0b6c3:   mov    %r14d,%esi
    0.00 :	  3516a0b6c6:   mov    %rbx,%rdi
    0.00 :	  3516a0b6c9:   callq  3516a0b040 <_dl_reloc_bad_type>
    0.00 :	  3516a0b6ce:   mov    -0xb4(%rbp),%eax
    0.00 :	  3516a0b6d4:   test   %eax,%eax
    0.00 :	  3516a0b6d6:   jne    3516a0c105 <_dl_relocate_object+0xe15>
    0.00 :	  3516a0b6dc:   orb    $0x4,0x314(%rbx)
    0.00 :	  3516a0b6e3:   cmpq   $0x0,-0xc8(%rbp)
    0.00 :	  3516a0b6eb:   jne    3516a0c0d7 <_dl_relocate_object+0xde7>
    0.00 :	  3516a0b6f1:   cmpq   $0x0,0x458(%rbx)
    0.00 :	  3516a0b6f9:   je     3516a0b708 <_dl_relocate_object+0x418>
    0.00 :	  3516a0b6fb:   mov    %rbx,%rdi
    0.00 :	  3516a0b6fe:   callq  3516a0b120 <_dl_protect_relro>
    0.00 :	  3516a0b703:   nopl   0x0(%rax,%rax,1)
    0.00 :	  3516a0b708:   lea    -0x28(%rbp),%rsp
    0.00 :	  3516a0b70c:   pop    %rbx
    0.00 :	  3516a0b70d:   pop    %r12
    0.00 :	  3516a0b70f:   pop    %r13
    0.00 :	  3516a0b711:   pop    %r14
    0.00 :	  3516a0b713:   pop    %r15
    0.00 :	  3516a0b715:   leaveq 
    0.00 :	  3516a0b716:   retq   
    0.00 :	  3516a0b717:   nopw   0x0(%rax,%rax,1)
    0.00 :	  3516a0b720:   test   %rax,%rax
    0.00 :	  3516a0b723:   je     3516a0b3a4 <_dl_relocate_object+0xb4>
    0.00 :	  3516a0b729:   mov    (%rbx),%rdx
    0.00 :	  3516a0b72c:   mov    0x8(%rax),%rax
    0.00 :	  3516a0b730:   lea    0xb0f9(%rip),%rsi        # 3516a16830 <_dl_tlsdesc_resolve_rela>
    0.00 :	  3516a0b737:   mov    %rsi,(%rdx,%rax,1)
    0.00 :	  3516a0b73b:   jmpq   3516a0b3a4 <_dl_relocate_object+0xb4>
    0.00 :	  3516a0b740:   cmpq   $0x0,0xf8(%rbx)
    0.00 :	  3516a0b748:   je     3516a0b394 <_dl_relocate_object+0xa4>
    0.00 :	  3516a0b74e:   mov    0x58(%rbx),%rax
    0.00 :	  3516a0b752:   mov    0x8(%rax),%rax
    0.00 :	  3516a0b756:   mov    0x8(%rax),%rdx
    0.00 :	  3516a0b75a:   test   %rdx,%rdx
    0.00 :	  3516a0b75d:   jne    3516a0bba8 <_dl_relocate_object+0x8b8>
    0.00 :	  3516a0b763:   mov    -0xb4(%rbp),%ecx
    0.00 :	  3516a0b769:   mov    %rbx,0x8(%rax)
    0.00 :	  3516a0b76d:   test   %ecx,%ecx
    0.00 :	  3516a0b76f:   jne    3516a0bf00 <_dl_relocate_object+0xc10>
    0.00 :	  3516a0b775:   lea    0x8ee4(%rip),%rcx        # 3516a14660 <_dl_runtime_resolve>
    0.00 :	  3516a0b77c:   test   %r13b,%r13b
    0.00 :	  3516a0b77f:   mov    %rcx,0x10(%rax)
    0.00 :	  3516a0b783:   mov    0x288(%rbx),%rax
    0.00 :	  3516a0b78a:   je     3516a0b3a4 <_dl_relocate_object+0xb4>
    0.00 :	  3516a0b790:   jmp    3516a0b720 <_dl_relocate_object+0x430>
    0.00 :	  3516a0b792:   nopw   0x0(%rax,%rax,1)
    0.00 :	  3516a0b798:   cmpq   $0x0,0x100(%rbx)
    0.00 :	  3516a0b7a0:   cmovne -0xb4(%rbp),%r12d
    0.00 :	  3516a0b7a8:   jmpq   3516a0b353 <_dl_relocate_object+0x63>
    0.00 :	  3516a0b7ad:   nopl   (%rax)
    0.00 :	  3516a0b7b0:   lea    (%rax,%rcx,1),%rcx
    0.00 :	  3516a0b7b4:   cmp    %rdx,%rcx
    0.00 :	  3516a0b7b7:   jne    3516a0b409 <_dl_relocate_object+0x119>
    0.00 :	  3516a0b7bd:   mov    0x50(%rbx),%rdx
    0.00 :	  3516a0b7c1:   mov    -0x70(%rbp),%rcx
    0.00 :	  3516a0b7c5:   add    0x8(%rdx),%rax
    0.00 :	  3516a0b7c9:   mov    -0x60(%rbp),%edx
    0.00 :	  3516a0b7cc:   mov    %rax,-0x68(%rbp)
    0.00 :	  3516a0b7d0:   jmpq   3516a0b428 <_dl_relocate_object+0x138>
    0.00 :	  3516a0b7d5:   nopl   (%rax)
    0.00 :	  3516a0b7d8:   mov    -0x38(%rbp),%rcx
    0.00 :	  3516a0b7dc:   test   %rcx,%rcx
    0.00 :	  3516a0b7df:   je     3516a0bd85 <_dl_relocate_object+0xa95>
    0.00 :	  3516a0b7e5:   mov    0x440(%rdx),%rax
    0.00 :	  3516a0b7ec:   cmp    $0x1,%rax
    0.00 :	  3516a0b7f0:   je     3516a0c225 <_dl_relocate_object+0xf35>
    0.00 :	  3516a0b7f6:   test   %rax,%rax
    0.00 :	  3516a0b7f9:   je     3516a0c248 <_dl_relocate_object+0xf58>
    0.00 :	  3516a0b7ff:   mov    0x10(%r13),%rdx
    0.00 :	  3516a0b803:   add    0x8(%rcx),%rdx
    0.00 :	  3516a0b807:   lea    0xaf62(%rip),%rcx        # 3516a16770 <_dl_tlsdesc_return>
    0.00 :	  3516a0b80e:   sub    %rax,%rdx
    0.00 :	  3516a0b811:   mov    %rdx,0x8(%r15)
    0.00 :	  3516a0b815:   mov    %rcx,(%r15)
    0.00 :	  3516a0b818:   nopl   0x0(%rax,%rax,1)
    0.00 :	  3516a0b820:   add    $0x18,%r13
    0.00 :	  3516a0b824:   cmp    %r13,-0x98(%rbp)
    0.00 :	  3516a0b82b:   ja     3516a0b568 <_dl_relocate_object+0x278>
    0.00 :	  3516a0b831:   jmpq   3516a0b491 <_dl_relocate_object+0x1a1>
    0.00 :	  3516a0b836:   nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  3516a0b840:   lea    0xe9d9(%rip),%rdi        # 3516a1a220 <expected2.13259+0x10>
    0.00 :	  3516a0b847:   movslq (%rdi,%r14,4),%rax
    0.00 :	  3516a0b84b:   add    %rdi,%rax
    0.00 :	  3516a0b84e:   jmpq   *%rax
    0.00 :	  3516a0b850:   add    0x10(%r13),%rsi
    0.00 :	  3516a0b854:   add    $0x18,%r13
    0.00 :	  3516a0b858:   cmp    %r13,-0x98(%rbp)
    0.00 :	  3516a0b85f:   mov    %rsi,(%r15)
    0.00 :	  3516a0b862:   ja     3516a0b568 <_dl_relocate_object+0x278>
    0.00 :	  3516a0b868:   jmpq   3516a0b491 <_dl_relocate_object+0x1a1>
    0.00 :	  3516a0b86d:   nopl   (%rax)
    0.00 :	  3516a0b870:   mov    -0x38(%rbp),%rax
    0.00 :	  3516a0b874:   test   %rax,%rax
    0.00 :	  3516a0b877:   je     3516a0b820 <_dl_relocate_object+0x530>
    0.00 :	  3516a0b879:   mov    0x440(%rdx),%rcx
    0.00 :	  3516a0b880:   cmp    $0x1,%rcx
    0.00 :	  3516a0b884:   jbe    3516a0c1ef <_dl_relocate_object+0xeff>
    0.00 :	  3516a0b88a:   mov    0x10(%r13),%rdx
    0.00 :	  3516a0b88e:   add    0x8(%rax),%rdx
    0.00 :	  3516a0b892:   add    $0x18,%r13
    0.00 :	  3516a0b896:   sub    %rcx,%rdx
    0.00 :	  3516a0b899:   mov    %rdx,(%r15)
    0.00 :	  3516a0b89c:   cmp    %r13,-0x98(%rbp)
    0.00 :	  3516a0b8a3:   ja     3516a0b568 <_dl_relocate_object+0x278>
    0.00 :	  3516a0b8a9:   jmpq   3516a0b491 <_dl_relocate_object+0x1a1>
    0.00 :	  3516a0b8ae:   xchg   %ax,%ax
    0.00 :	  3516a0b8b0:   mov    -0x38(%rbp),%rdx
    0.00 :	  3516a0b8b4:   test   %rdx,%rdx
    0.00 :	  3516a0b8b7:   je     3516a0b820 <_dl_relocate_object+0x530>
    0.00 :	  3516a0b8bd:   mov    0x10(%r13),%rax
    0.00 :	  3516a0b8c1:   add    0x8(%rdx),%rax
    0.00 :	  3516a0b8c5:   add    $0x18,%r13
    0.00 :	  3516a0b8c9:   mov    %rax,(%r15)
    0.00 :	  3516a0b8cc:   cmp    %r13,-0x98(%rbp)
    0.00 :	  3516a0b8d3:   ja     3516a0b568 <_dl_relocate_object+0x278>
    0.00 :	  3516a0b8d9:   jmpq   3516a0b491 <_dl_relocate_object+0x1a1>
    0.00 :	  3516a0b8de:   xchg   %ax,%ax
    0.00 :	  3516a0b8e0:   test   %rdx,%rdx
    0.00 :	  3516a0b8e3:   je     3516a0b820 <_dl_relocate_object+0x530>
    0.00 :	  3516a0b8e9:   mov    0x448(%rdx),%rax
    0.00 :	  3516a0b8f0:   add    $0x18,%r13
    0.00 :	  3516a0b8f4:   mov    %rax,(%r15)
    0.00 :	  3516a0b8f7:   cmp    %r13,-0x98(%rbp)
    0.00 :	  3516a0b8fe:   ja     3516a0b568 <_dl_relocate_object+0x278>
    0.00 :	  3516a0b904:   jmpq   3516a0b491 <_dl_relocate_object+0x1a1>
    0.00 :	  3516a0b909:   nopl   0x0(%rax)
    0.00 :	  3516a0b910:   add    0x10(%r13),%rsi
    0.00 :	  3516a0b914:   mov    $0xffffffff,%edi
    0.00 :	  3516a0b919:   cmp    %rdi,%rsi
    0.00 :	  3516a0b91c:   mov    %esi,(%r15)
    0.00 :	  3516a0b91f:   jbe    3516a0b820 <_dl_relocate_object+0x530>
    0.00 :	  3516a0b925:   lea    0x10b44(%rip),%rsi        # 3516a1c470 <expected1.10492+0x100f>
    0.00 :	  3516a0b92c:   mov    0x214255(%rip),%rdx        # 3516c1fb88 <_dl_argv>
    0.00 :	  3516a0b933:   mov    0x68(%rbx),%rax
    0.00 :	  3516a0b937:   lea    0xf3c8(%rip),%rcx        # 3516a1ad06 <intel_02_known+0x246>
    0.00 :	  3516a0b93e:   mov    $0x2,%edi
    0.00 :	  3516a0b943:   mov    (%rdx),%rdx
    0.00 :	  3516a0b946:   test   %rdx,%rdx
    0.00 :	  3516a0b949:   cmove  %rcx,%rdx
    0.00 :	  3516a0b94d:   mov    (%r12),%ecx
    0.00 :	  3516a0b951:   add    0x8(%rax),%rcx
    0.00 :	  3516a0b955:   xor    %eax,%eax
    0.00 :	  3516a0b957:   callq  3516a0f470 <_dl_dprintf>
    0.00 :	  3516a0b95c:   jmpq   3516a0b820 <_dl_relocate_object+0x530>
    0.00 :	  3516a0b961:   nopl   0x0(%rax)
    0.00 :	  3516a0b968:   mov    0x10(%r13),%rax
    0.00 :	  3516a0b96c:   add    (%rbx),%rax
    0.00 :	  3516a0b96f:   add    $0x18,%r13
    0.00 :	  3516a0b973:   callq  *%rax
    0.00 :	  3516a0b975:   mov    %rax,(%r15)
    0.00 :	  3516a0b978:   cmp    %r13,-0x98(%rbp)
    0.00 :	  3516a0b97f:   ja     3516a0b568 <_dl_relocate_object+0x278>
    0.00 :	  3516a0b985:   jmpq   3516a0b491 <_dl_relocate_object+0x1a1>
    0.00 :	  3516a0b98a:   nopw   0x0(%rax,%rax,1)
    0.00 :	  3516a0b990:   mov    -0x38(%rbp),%rax
    0.00 :	  3516a0b994:   test   %rax,%rax
    0.00 :	  3516a0b997:   je     3516a0b820 <_dl_relocate_object+0x530>
    0.00 :	  3516a0b99d:   mov    0x10(%r12),%rdx
    0.00 :	  3516a0b9a2:   cmp    %rdx,0x10(%rax)
    0.00 :	  3516a0b9a6:   mov    %r15,%rdi
    0.00 :	  3516a0b9a9:   cmovbe 0x10(%rax),%rdx
    0.00 :	  3516a0b9ae:   callq  3516a184b0 <memcpy>
    0.00 :	  3516a0b9b3:   mov    -0x38(%rbp),%rax
    0.00 :	  3516a0b9b7:   mov    0x10(%r12),%rsi
    0.00 :	  3516a0b9bc:   cmp    %rsi,0x10(%rax)
    0.00 :	  3516a0b9c0:   ja     3516a0c215 <_dl_relocate_object+0xf25>
    0.00 :	  3516a0b9c6:   jae    3516a0b820 <_dl_relocate_object+0x530>
    0.00 :	  3516a0b9cc:   cmpl   $0x0,0x214201(%rip)        # 3516c1fbd4 <_rtld_global_ro+0x34>
    0.00 :	  3516a0b9d3:   lea    0x10b16(%rip),%rsi        # 3516a1c4f0 <expected1.10492+0x108f>
    0.00 :	  3516a0b9da:   jne    3516a0b92c <_dl_relocate_object+0x63c>
    0.00 :	  3516a0b9e0:   jmpq   3516a0b820 <_dl_relocate_object+0x530>
    0.00 :	  3516a0b9e5:   nopl   (%rax)
    0.00 :	  3516a0b9e8:   sub    %r15,%rsi
    0.00 :	  3516a0b9eb:   add    0x10(%r13),%rsi
    0.00 :	  3516a0b9ef:   movslq %esi,%rax
    0.00 :	  3516a0b9f2:   mov    %esi,(%r15)
    0.00 :	  3516a0b9f5:   cmp    %rax,%rsi
    0.00 :	  3516a0b9f8:   je     3516a0b820 <_dl_relocate_object+0x530>
    0.00 :	  3516a0b9fe:   lea    0x10aab(%rip),%rsi        # 3516a1c4b0 <expected1.10492+0x104f>
    0.00 :	  3516a0ba05:   jmpq   3516a0b92c <_dl_relocate_object+0x63c>
    0.00 :	  3516a0ba0a:   nopw   0x0(%rax,%rax,1)
    0.00 :	  3516a0ba10:   mov    $0x1,%eax
    0.00 :	  3516a0ba15:   jmpq   3516a0b610 <_dl_relocate_object+0x320>
    0.00 :	  3516a0ba1a:   nopw   0x0(%rax,%rax,1)
    0.00 :	  3516a0ba20:   cmp    %r13,%rcx
    0.00 :	  3516a0ba23:   jae    3516a0b531 <_dl_relocate_object+0x241>
    0.00 :	  3516a0ba29:   nopl   0x0(%rax)
    0.00 :	  3516a0ba30:   mov    %r12,%rdx
    0.00 :	  3516a0ba33:   add    0x10(%r14),%rdx
    0.00 :	  3516a0ba37:   mov    (%r14),%rax
    0.00 :	  3516a0ba3a:   add    $0x18,%r14
    0.00 :	  3516a0ba3e:   cmp    %r14,%r13
    0.00 :	  3516a0ba41:   mov    %rdx,(%rax,%r12,1)
    0.00 :	  3516a0ba45:   ja     3516a0ba30 <_dl_relocate_object+0x740>
    0.00 :	  3516a0ba47:   mov    0x1c8(%rbx),%rax
    0.00 :	  3516a0ba4e:   test   %rax,%rax
    0.00 :	  3516a0ba51:   jne    3516a0b541 <_dl_relocate_object+0x251>
    0.00 :	  3516a0ba57:   cmp    %r13,%r10
    0.00 :	  3516a0ba5a:   jbe    3516a0b491 <_dl_relocate_object+0x1a1>
    0.00 :	  3516a0ba60:   mov    %r10,-0x90(%rbp)
    0.00 :	  3516a0ba67:   mov    %r12,-0x88(%rbp)
    0.00 :	  3516a0ba6e:   xchg   %ax,%ax
    0.00 :	  3516a0ba70:   mov    0x8(%r13),%r14
    0.00 :	  3516a0ba74:   mov    -0x80(%rbp),%rdi
    0.00 :	  3516a0ba78:   mov    -0x88(%rbp),%r15
    0.00 :	  3516a0ba7f:   add    0x0(%r13),%r15
    0.00 :	  3516a0ba83:   mov    %r14,%rax
    0.00 :	  3516a0ba86:   and    $0xffffffffffffffff,%r14d
    0.00 :	  3516a0ba8a:   shr    $0x20,%rax
    0.00 :	  3516a0ba8e:   cmp    $0x8,%r14
    0.00 :	  3516a0ba92:   lea    (%rax,%rax,2),%rax
    0.00 :	  3516a0ba96:   lea    (%rdi,%rax,8),%r12
    0.00 :	  3516a0ba9a:   mov    %r12,-0x38(%rbp)
    0.00 :	  3516a0ba9e:   je     3516a0c1e0 <_dl_relocate_object+0xef0>
    0.00 :	  3516a0baa4:   test   %r14,%r14
    0.00 :	  3516a0baa7:   je     3516a0bbd0 <_dl_relocate_object+0x8e0>
    0.00 :	  3516a0baad:   movzbl 0x4(%r12),%ecx
    0.00 :	  3516a0bab3:   mov    %r12,%rax
    0.00 :	  3516a0bab6:   mov    %rbx,%rdx
    0.00 :	  3516a0bab9:   shr    $0x4,%cl
    0.00 :	  3516a0babc:   test   %cl,%cl
    0.00 :	  3516a0babe:   je     3516a0bb70 <_dl_relocate_object+0x880>
    0.00 :	  3516a0bac4:   cmp    0x3f8(%rbx),%r12
    0.00 :	  3516a0bacb:   je     3516a0c17a <_dl_relocate_object+0xe8a>
    0.00 :	  3516a0bad1:   cmp    $0x10,%r14
    0.00 :	  3516a0bad5:   sete   %al
    0.00 :	  3516a0bad8:   cmp    $0x7,%r14
    0.00 :	  3516a0badc:   sete   %dl
    0.00 :	  3516a0badf:   or     %edx,%eax
    0.00 :	  3516a0bae1:   test   %al,%al
    0.00 :	  3516a0bae3:   jne    3516a0bd70 <_dl_relocate_object+0xa80>
    0.00 :	  3516a0bae9:   cmp    $0x12,%r14
    0.00 :	  3516a0baed:   je     3516a0bd70 <_dl_relocate_object+0xa80>
    0.00 :	  3516a0baf3:   cmp    $0x11,%r14
    0.00 :	  3516a0baf7:   je     3516a0bd70 <_dl_relocate_object+0xa80>
    0.00 :	  3516a0bafd:   xor    %eax,%eax
    0.00 :	  3516a0baff:   cmp    $0x24,%r14
    0.00 :	  3516a0bb03:   sete   %al
    0.00 :	  3516a0bb06:   xor    %r9d,%r9d
    0.00 :	  3516a0bb09:   cmp    $0x5,%r14
    0.00 :	  3516a0bb0d:   mov    -0xb0(%rbp),%rdx
    0.00 :	  3516a0bb14:   sete   %r9b
    0.00 :	  3516a0bb18:   mov    -0xa0(%rbp),%rcx
    0.00 :	  3516a0bb1f:   xor    %r8d,%r8d
    0.00 :	  3516a0bb22:   add    %r9d,%r9d
    0.00 :	  3516a0bb25:   mov    %rbx,%rsi
    0.00 :	  3516a0bb28:   or     %eax,%r9d
    0.00 :	  3516a0bb2b:   mov    -0x38(%rbp),%rax
    0.00 :	  3516a0bb2f:   mov    %r9d,0x400(%rbx)
    0.00 :	  3516a0bb36:   mov    (%rax),%edi
    0.00 :	  3516a0bb38:   mov    %rax,0x3f8(%rbx)
    0.00 :	  3516a0bb3f:   add    -0xa8(%rbp),%rdi
    0.00 :	  3516a0bb46:   movq   $0x0,0x8(%rsp)
    0.00 :	  3516a0bb4f:   movl   $0x1,(%rsp)
    0.00 :	  3516a0bb56:   callq  3516a09cf0 <_dl_lookup_symbol_x>
    0.00 :	  3516a0bb5b:   mov    %rax,%rdx
    0.00 :	  3516a0bb5e:   mov    -0x38(%rbp),%rax
    0.00 :	  3516a0bb62:   mov    %rdx,0x408(%rbx)
    0.00 :	  3516a0bb69:   mov    %rax,0x410(%rbx)
    0.00 :	  3516a0bb70:   xor    %esi,%esi
    0.00 :	  3516a0bb72:   test   %rax,%rax
    0.00 :	  3516a0bb75:   je     3516a0bb8e <_dl_relocate_object+0x89e>
    0.00 :	  3516a0bb77:   movzbl 0x4(%rax),%ecx
    0.00 :	  3516a0bb7b:   mov    0x8(%rax),%rsi
    0.00 :	  3516a0bb7f:   add    (%rdx),%rsi
    0.00 :	  3516a0bb82:   and    $0xf,%ecx
    0.00 :	  3516a0bb85:   cmp    $0xa,%ecx
    0.00 :	  3516a0bb88:   je     3516a0c0b4 <_dl_relocate_object+0xdc4>
    0.00 :	  3516a0bb8e:   cmp    $0x25,%r14
    0.00 :	  3516a0bb92:   ja     3516a0b6c1 <_dl_relocate_object+0x3d1>
    0.00 :	  3516a0bb98:   lea    0xe719(%rip),%rcx        # 3516a1a2b8 <expected2.13259+0xa8>
    0.00 :	  3516a0bb9f:   movslq (%rcx,%r14,4),%rax
    0.00 :	  3516a0bba3:   add    %rcx,%rax
    0.00 :	  3516a0bba6:   jmpq   *%rax
    0.00 :	  3516a0bba8:   add    (%rbx),%rdx
    0.00 :	  3516a0bbab:   mov    %rdx,0x3e0(%rbx)
    0.00 :	  3516a0bbb2:   lea    0x18(%rax),%rdx
    0.00 :	  3516a0bbb6:   mov    %rdx,0x3e8(%rbx)
    0.00 :	  3516a0bbbd:   jmpq   3516a0b763 <_dl_relocate_object+0x473>
    0.00 :	  3516a0bbc2:   add    0x10(%r13),%rsi
    0.00 :	  3516a0bbc6:   mov    %rsi,(%r15)
    0.00 :	  3516a0bbc9:   nopl   0x0(%rax)
    0.00 :	  3516a0bbd0:   add    $0x18,%r13
    0.00 :	  3516a0bbd4:   cmp    %r13,-0x90(%rbp)
    0.00 :	  3516a0bbdb:   ja     3516a0ba70 <_dl_relocate_object+0x780>
    0.00 :	  3516a0bbe1:   jmpq   3516a0b491 <_dl_relocate_object+0x1a1>
    0.00 :	  3516a0bbe6:   mov    -0x38(%rbp),%rax
    0.00 :	  3516a0bbea:   test   %rax,%rax
    0.00 :	  3516a0bbed:   je     3516a0bd9c <_dl_relocate_object+0xaac>
    0.00 :	  3516a0bbf3:   mov    0x440(%rdx),%rcx
    0.00 :	  3516a0bbfa:   cmp    $0x1,%rcx
    0.00 :	  3516a0bbfe:   je     3516a0bec6 <_dl_relocate_object+0xbd6>
    0.00 :	  3516a0bc04:   test   %rcx,%rcx
    0.00 :	  3516a0bc07:   je     3516a0c086 <_dl_relocate_object+0xd96>
    0.00 :	  3516a0bc0d:   mov    0x10(%r13),%rdx
    0.00 :	  3516a0bc11:   add    0x8(%rax),%rdx
    0.00 :	  3516a0bc15:   lea    0xab54(%rip),%rax        # 3516a16770 <_dl_tlsdesc_return>
    0.00 :	  3516a0bc1c:   sub    %rcx,%rdx
    0.00 :	  3516a0bc1f:   mov    %rdx,0x8(%r15)
    0.00 :	  3516a0bc23:   mov    %rax,(%r15)
    0.00 :	  3516a0bc26:   jmp    3516a0bbd0 <_dl_relocate_object+0x8e0>
    0.00 :	  3516a0bc28:   mov    -0x38(%rbp),%rax
    0.00 :	  3516a0bc2c:   test   %rax,%rax
    0.00 :	  3516a0bc2f:   je     3516a0bbd0 <_dl_relocate_object+0x8e0>
    0.00 :	  3516a0bc31:   mov    0x440(%rdx),%rcx
    0.00 :	  3516a0bc38:   cmp    $0x1,%rcx
    0.00 :	  3516a0bc3c:   jbe    3516a0c060 <_dl_relocate_object+0xd70>
    0.00 :	  3516a0bc42:   mov    0x10(%r13),%rdx
    0.00 :	  3516a0bc46:   add    0x8(%rax),%rdx
    0.00 :	  3516a0bc4a:   sub    %rcx,%rdx
    0.00 :	  3516a0bc4d:   mov    %rdx,(%r15)
    0.00 :	  3516a0bc50:   jmpq   3516a0bbd0 <_dl_relocate_object+0x8e0>
    0.00 :	  3516a0bc55:   mov    -0x38(%rbp),%rdx
    0.00 :	  3516a0bc59:   test   %rdx,%rdx
    0.00 :	  3516a0bc5c:   je     3516a0bbd0 <_dl_relocate_object+0x8e0>
    0.00 :	  3516a0bc62:   mov    0x10(%r13),%rax
    0.00 :	  3516a0bc66:   add    0x8(%rdx),%rax
    0.00 :	  3516a0bc6a:   mov    %rax,(%r15)
    0.00 :	  3516a0bc6d:   jmpq   3516a0bbd0 <_dl_relocate_object+0x8e0>
    0.00 :	  3516a0bc72:   test   %rdx,%rdx
    0.00 :	  3516a0bc75:   je     3516a0bbd0 <_dl_relocate_object+0x8e0>
    0.00 :	  3516a0bc7b:   mov    0x448(%rdx),%rax
    0.00 :	  3516a0bc82:   mov    %rax,(%r15)
    0.00 :	  3516a0bc85:   jmpq   3516a0bbd0 <_dl_relocate_object+0x8e0>
    0.00 :	  3516a0bc8a:   add    0x10(%r13),%rsi
    0.00 :	  3516a0bc8e:   mov    $0xffffffff,%edx
    0.00 :	  3516a0bc93:   cmp    %rdx,%rsi
    0.00 :	  3516a0bc96:   mov    %esi,(%r15)
    0.00 :	  3516a0bc99:   jbe    3516a0bbd0 <_dl_relocate_object+0x8e0>
    0.00 :	  3516a0bc9f:   lea    0x107ca(%rip),%rsi        # 3516a1c470 <expected1.10492+0x100f>
    0.00 :	  3516a0bca6:   jmpq   3516a0bd35 <_dl_relocate_object+0xa45>
    0.00 :	  3516a0bcab:   nopl   0x0(%rax,%rax,1)
    0.00 :	  3516a0bcb0:   mov    0x10(%r13),%rax
    0.00 :	  3516a0bcb4:   add    (%rbx),%rax
    0.00 :	  3516a0bcb7:   callq  *%rax
    0.00 :	  3516a0bcb9:   mov    %rax,(%r15)
    0.00 :	  3516a0bcbc:   jmpq   3516a0bbd0 <_dl_relocate_object+0x8e0>
    0.00 :	  3516a0bcc1:   mov    -0x38(%rbp),%rax
    0.00 :	  3516a0bcc5:   test   %rax,%rax
    0.00 :	  3516a0bcc8:   je     3516a0bbd0 <_dl_relocate_object+0x8e0>
    0.00 :	  3516a0bcce:   mov    0x10(%r12),%rdx
    0.00 :	  3516a0bcd3:   cmp    %rdx,0x10(%rax)
    0.00 :	  3516a0bcd7:   mov    %r15,%rdi
    0.00 :	  3516a0bcda:   cmovbe 0x10(%rax),%rdx
    0.00 :	  3516a0bcdf:   callq  3516a184b0 <memcpy>
    0.00 :	  3516a0bce4:   mov    -0x38(%rbp),%rax
    0.00 :	  3516a0bce8:   mov    0x10(%r12),%rsi
    0.00 :	  3516a0bced:   cmp    %rsi,0x10(%rax)
    0.00 :	  3516a0bcf1:   ja     3516a0c054 <_dl_relocate_object+0xd64>
    0.00 :	  3516a0bcf7:   jae    3516a0bbd0 <_dl_relocate_object+0x8e0>
    0.00 :	  3516a0bcfd:   cmpl   $0x0,0x213ed0(%rip)        # 3516c1fbd4 <_rtld_global_ro+0x34>
    0.00 :	  3516a0bd04:   lea    0x107e5(%rip),%rsi        # 3516a1c4f0 <expected1.10492+0x108f>
    0.00 :	  3516a0bd0b:   jne    3516a0bd35 <_dl_relocate_object+0xa45>
    0.00 :	  3516a0bd0d:   jmpq   3516a0bbd0 <_dl_relocate_object+0x8e0>
    0.00 :	  3516a0bd12:   nopw   0x0(%rax,%rax,1)
    0.00 :	  3516a0bd18:   sub    %r15,%rsi
    0.00 :	  3516a0bd1b:   add    0x10(%r13),%rsi
    0.00 :	  3516a0bd1f:   movslq %esi,%rax
    0.00 :	  3516a0bd22:   mov    %esi,(%r15)
    0.00 :	  3516a0bd25:   cmp    %rax,%rsi
    0.00 :	  3516a0bd28:   je     3516a0bbd0 <_dl_relocate_object+0x8e0>
    0.00 :	  3516a0bd2e:   lea    0x1077b(%rip),%rsi        # 3516a1c4b0 <expected1.10492+0x104f>
    0.00 :	  3516a0bd35:   mov    0x213e4c(%rip),%rdx        # 3516c1fb88 <_dl_argv>
    0.00 :	  3516a0bd3c:   mov    0x68(%rbx),%rax
    0.00 :	  3516a0bd40:   lea    0xefbf(%rip),%rcx        # 3516a1ad06 <intel_02_known+0x246>
    0.00 :	  3516a0bd47:   mov    $0x2,%edi
    0.00 :	  3516a0bd4c:   mov    (%rdx),%rdx
    0.00 :	  3516a0bd4f:   test   %rdx,%rdx
    0.00 :	  3516a0bd52:   cmove  %rcx,%rdx
    0.00 :	  3516a0bd56:   mov    (%r12),%ecx
    0.00 :	  3516a0bd5a:   add    0x8(%rax),%rcx
    0.00 :	  3516a0bd5e:   xor    %eax,%eax
    0.00 :	  3516a0bd60:   callq  3516a0f470 <_dl_dprintf>
    0.00 :	  3516a0bd65:   jmpq   3516a0bbd0 <_dl_relocate_object+0x8e0>
    0.00 :	  3516a0bd6a:   nopw   0x0(%rax,%rax,1)
    0.00 :	  3516a0bd70:   mov    $0x1,%eax
    0.00 :	  3516a0bd75:   jmpq   3516a0bb06 <_dl_relocate_object+0x816>
    0.00 :	  3516a0bd7a:   mov    -0x68(%rbp),%rax
    0.00 :	  3516a0bd7e:   xor    %edx,%edx
    0.00 :	  3516a0bd80:   jmpq   3516a0b428 <_dl_relocate_object+0x138>
    0.00 :	  3516a0bd85:   mov    0x10(%r13),%rax
    0.00 :	  3516a0bd89:   mov    %rax,0x8(%r15)
    0.00 :	  3516a0bd8d:   lea    0xa9ec(%rip),%rax        # 3516a16780 <_dl_tlsdesc_undefweak>
    0.00 :	  3516a0bd94:   mov    %rax,(%r15)
    0.00 :	  3516a0bd97:   jmpq   3516a0b820 <_dl_relocate_object+0x530>
    0.00 :	  3516a0bd9c:   mov    0x10(%r13),%rax
    0.00 :	  3516a0bda0:   lea    0xa9d9(%rip),%rsi        # 3516a16780 <_dl_tlsdesc_undefweak>
    0.00 :	  3516a0bda7:   mov    %rax,0x8(%r15)
    0.00 :	  3516a0bdab:   mov    %rsi,(%r15)
    0.00 :	  3516a0bdae:   jmpq   3516a0bbd0 <_dl_relocate_object+0x8e0>
    0.00 :	  3516a0bdb3:   cmp    $0x24,%rsi
    0.00 :	  3516a0bdb7:   jne    3516a0bee9 <_dl_relocate_object+0xbf9>
    0.00 :	  3516a0bdbd:   mov    0x290(%rbx),%rdx
    0.00 :	  3516a0bdc4:   mov    %r14,0x8(%r13)
    0.00 :	  3516a0bdc8:   mov    (%rbx),%rax
    0.00 :	  3516a0bdcb:   add    0x8(%rdx),%rax
    0.00 :	  3516a0bdcf:   mov    %rax,0x0(%r13)
    0.00 :	  3516a0bdd3:   jmpq   3516a0b488 <_dl_relocate_object+0x198>
    0.00 :	  3516a0bdd8:   mov    %r13,%rdx
    0.00 :	  3516a0bddb:   sub    0x3e8(%rbx),%rdx
    0.00 :	  3516a0bde2:   lea    (%rax,%rdx,2),%rax
    0.00 :	  3516a0bde6:   mov    %rax,0x0(%r13)
    0.00 :	  3516a0bdea:   jmpq   3516a0b488 <_dl_relocate_object+0x198>
    0.00 :	  3516a0bdef:   mov    0x10(%r13),%rax
    0.00 :	  3516a0bdf3:   add    (%rbx),%rax
    0.00 :	  3516a0bdf6:   mov    %rax,(%r15)
    0.00 :	  3516a0bdf9:   jmpq   3516a0b820 <_dl_relocate_object+0x530>
    0.00 :	  3516a0bdfe:   cmp    $0x10,%r14
    0.00 :	  3516a0be02:   sete   %al
    0.00 :	  3516a0be05:   cmp    $0x7,%r14
    0.00 :	  3516a0be09:   sete   %dl
    0.00 :	  3516a0be0c:   or     %dl,%al
    0.00 :	  3516a0be0e:   jne    3516a0be80 <_dl_relocate_object+0xb90>
    0.00 :	  3516a0be10:   cmp    $0x12,%r14
    0.00 :	  3516a0be14:   je     3516a0be80 <_dl_relocate_object+0xb90>
    0.00 :	  3516a0be16:   cmp    $0x11,%r14
    0.00 :	  3516a0be1a:   je     3516a0be80 <_dl_relocate_object+0xb90>
    0.00 :	  3516a0be1c:   xor    %ecx,%ecx
    0.00 :	  3516a0be1e:   cmp    $0x24,%r14
    0.00 :	  3516a0be22:   sete   %cl
    0.00 :	  3516a0be25:   xor    %edx,%edx
    0.00 :	  3516a0be27:   cmp    $0x5,%r14
    0.00 :	  3516a0be2b:   sete   %dl
    0.00 :	  3516a0be2e:   add    %edx,%edx
    0.00 :	  3516a0be30:   or     %ecx,%edx
    0.00 :	  3516a0be32:   cmp    0x400(%rbx),%edx
    0.00 :	  3516a0be38:   jne    3516a0b5eb <_dl_relocate_object+0x2fb>
    0.00 :	  3516a0be3e:   mov    0x410(%rbx),%rax
    0.00 :	  3516a0be45:   addq   $0x1,0x214b33(%rip)        # 3516c20980 <_rtld_global+0x980>
    0.00 :	  3516a0be4d:   mov    0x408(%rbx),%rdx
    0.00 :	  3516a0be54:   mov    %rax,-0x38(%rbp)
    0.00 :	  3516a0be58:   jmpq   3516a0b699 <_dl_relocate_object+0x3a9>
    0.00 :	  3516a0be5d:   cmpw   $0x0,0x6(%rax)
    0.00 :	  3516a0be62:   je     3516a0b6b7 <_dl_relocate_object+0x3c7>
    0.00 :	  3516a0be68:   mov    %rdx,-0xd0(%rbp)
    0.00 :	  3516a0be6f:   callq  *%rsi
    0.00 :	  3516a0be71:   mov    -0xd0(%rbp),%rdx
    0.00 :	  3516a0be78:   mov    %rax,%rsi
    0.00 :	  3516a0be7b:   jmpq   3516a0b6b7 <_dl_relocate_object+0x3c7>
    0.00 :	  3516a0be80:   mov    $0x1,%ecx
    0.00 :	  3516a0be85:   jmp    3516a0be25 <_dl_relocate_object+0xb35>
    0.00 :	  3516a0be87:   mov    0x8(%rbx),%rsi
    0.00 :	  3516a0be8b:   lea    0xf012(%rip),%rdx        # 3516a1aea4 <intel_02_known+0x3e4>
    0.00 :	  3516a0be92:   lea    0xf3ed(%rip),%rax        # 3516a1b286 <curwd.12277+0x108>
    0.00 :	  3516a0be99:   test   %r12d,%r12d
    0.00 :	  3516a0be9c:   cmovne %rax,%rdx
    0.00 :	  3516a0bea0:   cmpb   $0x0,(%rsi)
    0.00 :	  3516a0bea3:   jne    3516a0beaf <_dl_relocate_object+0xbbf>
    0.00 :	  3516a0bea5:   mov    0x213cdc(%rip),%rax        # 3516c1fb88 <_dl_argv>
    0.00 :	  3516a0beac:   mov    (%rax),%rsi
    0.00 :	  3516a0beaf:   lea    0xf3d8(%rip),%rdi        # 3516a1b28e <curwd.12277+0x110>
    0.00 :	  3516a0beb6:   xor    %eax,%eax
    0.00 :	  3516a0beb8:   callq  3516a0f5c0 <_dl_debug_printf>
    0.00 :	  3516a0bebd:   jmpq   3516a0b360 <_dl_relocate_object+0x70>
    0.00 :	  3516a0bec2:   mov    -0x38(%rbp),%rax
    0.00 :	  3516a0bec6:   mov    0x10(%r13),%rsi
    0.00 :	  3516a0beca:   add    0x8(%rax),%rsi
    0.00 :	  3516a0bece:   mov    %rdx,%rdi
    0.00 :	  3516a0bed1:   callq  3516a162d0 <_dl_make_tlsdesc_dynamic>
    0.00 :	  3516a0bed6:   lea    0xa8b3(%rip),%rdi        # 3516a16790 <_dl_tlsdesc_dynamic>
    0.00 :	  3516a0bedd:   mov    %rax,0x8(%r15)
    0.00 :	  3516a0bee1:   mov    %rdi,(%r15)
    0.00 :	  3516a0bee4:   jmpq   3516a0bbd0 <_dl_relocate_object+0x8e0>
    0.00 :	  3516a0bee9:   cmp    $0x25,%rsi
    0.00 :	  3516a0beed:   je     3516a0bf88 <_dl_relocate_object+0xc98>
    0.00 :	  3516a0bef3:   mov    $0x1,%edx
    0.00 :	  3516a0bef8:   mov    %rbx,%rdi
    0.00 :	  3516a0befb:   callq  3516a0b040 <_dl_reloc_bad_type>
    0.00 :	  3516a0bf00:   mov    0x213d11(%rip),%rdi        # 3516c1fc18 <_rtld_global_ro+0x78>
    0.00 :	  3516a0bf07:   lea    0x87c2(%rip),%rdx        # 3516a146d0 <_dl_runtime_profile>
    0.00 :	  3516a0bf0e:   mov    %rdx,0x10(%rax)
    0.00 :	  3516a0bf12:   test   %rdi,%rdi
    0.00 :	  3516a0bf15:   je     3516a0b394 <_dl_relocate_object+0xa4>
    0.00 :	  3516a0bf1b:   mov    %rbx,%rsi
    0.00 :	  3516a0bf1e:   callq  3516a0ee50 <_dl_name_match_p>
    0.00 :	  3516a0bf23:   test   %eax,%eax
    0.00 :	  3516a0bf25:   je     3516a0b394 <_dl_relocate_object+0xa4>
    0.00 :	  3516a0bf2b:   mov    %rbx,0x214a3e(%rip)        # 3516c20970 <_rtld_global+0x970>
    0.00 :	  3516a0bf32:   jmpq   3516a0b394 <_dl_relocate_object+0xa4>
    0.00 :	  3516a0bf37:   mov    0x2a0(%rbx),%rax
    0.00 :	  3516a0bf3e:   movq   $0x0,-0xc8(%rbp)
    0.00 :	  3516a0bf49:   mov    $0x2ffffffff,%r15
    0.00 :	  3516a0bf53:   movzwl 0x2b0(%rbx),%edx
    0.00 :	  3516a0bf5a:   mov    %r12d,%r14d
    0.00 :	  3516a0bf5d:   mov    %rax,%r13
    0.00 :	  3516a0bf60:   jmp    3516a0bf73 <_dl_relocate_object+0xc83>
    0.00 :	  3516a0bf62:   mov    %r15,%rcx
    0.00 :	  3516a0bf65:   and    0x0(%r13),%rcx
    0.00 :	  3516a0bf69:   cmp    $0x1,%rcx
    0.00 :	  3516a0bf6d:   je     3516a0bfa8 <_dl_relocate_object+0xcb8>
    0.00 :	  3516a0bf6f:   add    $0x38,%r13
    0.00 :	  3516a0bf73:   imul   $0x38,%rdx,%rcx
    0.00 :	  3516a0bf77:   lea    (%rax,%rcx,1),%rcx
    0.00 :	  3516a0bf7b:   cmp    %rcx,%r13
    0.00 :	  3516a0bf7e:   jb     3516a0bf62 <_dl_relocate_object+0xc72>
    0.00 :	  3516a0bf80:   mov    %r14d,%r12d
    0.00 :	  3516a0bf83:   jmpq   3516a0b379 <_dl_relocate_object+0x89>
    0.00 :	  3516a0bf88:   mov    0x10(%r14),%rax
    0.00 :	  3516a0bf8c:   add    (%rbx),%rax
    0.00 :	  3516a0bf8f:   mov    %r10,-0xd0(%rbp)
    0.00 :	  3516a0bf96:   callq  *%rax
    0.00 :	  3516a0bf98:   mov    -0xd0(%rbp),%r10
    0.00 :	  3516a0bf9f:   mov    %rax,0x0(%r13)
    0.00 :	  3516a0bfa3:   jmpq   3516a0b488 <_dl_relocate_object+0x198>
    0.00 :	  3516a0bfa8:   mov    0x10(%r13),%rax
    0.00 :	  3516a0bfac:   mov    0x213c05(%rip),%rdx        # 3516c1fbb8 <_rtld_global_ro+0x18>
    0.00 :	  3516a0bfb3:   sub    $0x30,%rsp
    0.00 :	  3516a0bfb7:   lea    0x1f(%rsp),%r12
    0.00 :	  3516a0bfbc:   mov    %rax,%rcx
    0.00 :	  3516a0bfbf:   add    0x28(%r13),%rcx
    0.00 :	  3516a0bfc3:   mov    %rdx,%rdi
    0.00 :	  3516a0bfc6:   neg    %rdi
    0.00 :	  3516a0bfc9:   and    $0xfffffffffffffff0,%r12
    0.00 :	  3516a0bfcd:   and    %rdi,%rax
    0.00 :	  3516a0bfd0:   lea    -0x1(%rdx,%rcx,1),%rsi
    0.00 :	  3516a0bfd5:   mov    $0x3,%edx
    0.00 :	  3516a0bfda:   and    %rdi,%rsi
    0.00 :	  3516a0bfdd:   sub    %rax,%rsi
    0.00 :	  3516a0bfe0:   mov    %rsi,0x8(%r12)
    0.00 :	  3516a0bfe5:   and    0x10(%r13),%rdi
    0.00 :	  3516a0bfe9:   add    (%rbx),%rdi
    0.00 :	  3516a0bfec:   mov    %rdi,(%r12)
    0.00 :	  3516a0bff0:   callq  3516a16f40 <__mprotect>
    0.00 :	  3516a0bff5:   test   %eax,%eax
    0.00 :	  3516a0bff7:   js     3516a0c03c <_dl_relocate_object+0xd4c>
    0.00 :	  3516a0bff9:   mov    0x4(%r13),%eax
    0.00 :	  3516a0bffd:   mov    $0x73516240,%esi
    0.00 :	  3516a0c002:   mov    -0xc8(%rbp),%rdi
    0.00 :	  3516a0c009:   movzwl 0x2b0(%rbx),%edx
    0.00 :	  3516a0c010:   mov    %r12,-0xc8(%rbp)
    0.00 :	  3516a0c017:   and    $0x7,%eax
    0.00 :	  3516a0c01a:   mov    %rdi,0x18(%r12)
    0.00 :	  3516a0c01f:   shl    $0x2,%eax
    0.00 :	  3516a0c022:   mov    %eax,%ecx
    0.00 :	  3516a0c024:   sar    %cl,%esi
    0.00 :	  3516a0c026:   mov    %esi,%eax
    0.00 :	  3516a0c028:   and    $0xf,%eax
    0.00 :	  3516a0c02b:   mov    %eax,0x10(%r12)
    0.00 :	  3516a0c030:   mov    0x2a0(%rbx),%rax
    0.00 :	  3516a0c037:   jmpq   3516a0bf6f <_dl_relocate_object+0xc7f>
    0.00 :	  3516a0c03c:   lea    0x103fd(%rip),%rcx        # 3516a1c440 <expected1.10492+0xfdf>
    0.00 :	  3516a0c043:   mov    0x8(%rbx),%rsi
    0.00 :	  3516a0c047:   mov    0x2150f7(%rip),%edi        # 3516c21144 <rtld_errno>
    0.00 :	  3516a0c04d:   xor    %edx,%edx
    0.00 :	  3516a0c04f:   callq  3516a0e220 <_dl_signal_error>
    0.00 :	  3516a0c054:   lea    0x10495(%rip),%rsi        # 3516a1c4f0 <expected1.10492+0x108f>
    0.00 :	  3516a0c05b:   jmpq   3516a0bd35 <_dl_relocate_object+0xa45>
    0.00 :	  3516a0c060:   mov    %rdx,%rdi
    0.00 :	  3516a0c063:   mov    %rdx,-0xd0(%rbp)
    0.00 :	  3516a0c06a:   callq  3516a0b2c0 <_dl_allocate_static_tls>
    0.00 :	  3516a0c06f:   mov    -0xd0(%rbp),%rdx
    0.00 :	  3516a0c076:   mov    -0x38(%rbp),%rax
    0.00 :	  3516a0c07a:   mov    0x440(%rdx),%rcx
    0.00 :	  3516a0c081:   jmpq   3516a0bc42 <_dl_relocate_object+0x952>
    0.00 :	  3516a0c086:   mov    %rdx,%rdi
    0.00 :	  3516a0c089:   mov    %rdx,-0xd0(%rbp)
    0.00 :	  3516a0c090:   callq  3516a0b1f0 <_dl_try_allocate_static_tls>
    0.00 :	  3516a0c095:   test   %eax,%eax
    0.00 :	  3516a0c097:   mov    -0xd0(%rbp),%rdx
    0.00 :	  3516a0c09e:   jne    3516a0bec2 <_dl_relocate_object+0xbd2>
    0.00 :	  3516a0c0a4:   mov    -0x38(%rbp),%rax
    0.00 :	  3516a0c0a8:   mov    0x440(%rdx),%rcx
    0.00 :	  3516a0c0af:   jmpq   3516a0bc0d <_dl_relocate_object+0x91d>
    0.00 :	  3516a0c0b4:   cmpw   $0x0,0x6(%rax)
    0.00 :	  3516a0c0b9:   je     3516a0bb8e <_dl_relocate_object+0x89e>
    0.00 :	  3516a0c0bf:   mov    %rdx,-0xd0(%rbp)
    0.00 :	  3516a0c0c6:   callq  *%rsi
    0.00 :	  3516a0c0c8:   mov    -0xd0(%rbp),%rdx
    0.00 :	  3516a0c0cf:   mov    %rax,%rsi
    0.00 :	  3516a0c0d2:   jmpq   3516a0bb8e <_dl_relocate_object+0x89e>
    0.00 :	  3516a0c0d7:   mov    -0xc8(%rbp),%r12
    0.00 :	  3516a0c0de:   mov    0x10(%r12),%edx
    0.00 :	  3516a0c0e3:   mov    0x8(%r12),%rsi
    0.00 :	  3516a0c0e8:   mov    (%r12),%rdi
    0.00 :	  3516a0c0ec:   callq  3516a16f40 <__mprotect>
    0.00 :	  3516a0c0f1:   test   %eax,%eax
    0.00 :	  3516a0c0f3:   js     3516a0c165 <_dl_relocate_object+0xe75>
    0.00 :	  3516a0c0f5:   mov    0x18(%r12),%r12
    0.00 :	  3516a0c0fa:   test   %r12,%r12
    0.00 :	  3516a0c0fd:   je     3516a0b6f1 <_dl_relocate_object+0x401>
    0.00 :	  3516a0c103:   jmp    3516a0c0de <_dl_relocate_object+0xdee>
    0.00 :	  3516a0c105:   mov    0x50(%rbx),%rax
    0.00 :	  3516a0c109:   test   %rax,%rax
    0.00 :	  3516a0c10c:   je     3516a0c171 <_dl_relocate_object+0xe81>
    0.00 :	  3516a0c10e:   mov    0x8(%rax),%rsi
    0.00 :	  3516a0c112:   mov    $0x20,%edi
    0.00 :	  3516a0c117:   callq  3516a00ad0 <calloc@plt>
    0.00 :	  3516a0c11c:   test   %rax,%rax
    0.00 :	  3516a0c11f:   mov    %rax,0x328(%rbx)
    0.00 :	  3516a0c126:   lea    0x1043b(%rip),%rsi        # 3516a1c568 <expected1.10492+0x1107>
    0.00 :	  3516a0c12d:   jne    3516a0b6dc <_dl_relocate_object+0x3ec>
    0.00 :	  3516a0c133:   mov    0x213a4e(%rip),%rax        # 3516c1fb88 <_dl_argv>
    0.00 :	  3516a0c13a:   mov    0x8(%rbx),%rcx
    0.00 :	  3516a0c13e:   mov    $0x2,%edi
    0.00 :	  3516a0c143:   mov    (%rax),%rdx
    0.00 :	  3516a0c146:   lea    0xebb9(%rip),%rax        # 3516a1ad06 <intel_02_known+0x246>
    0.00 :	  3516a0c14d:   test   %rdx,%rdx
    0.00 :	  3516a0c150:   cmove  %rax,%rdx
    0.00 :	  3516a0c154:   xor    %eax,%eax
    0.00 :	  3516a0c156:   callq  3516a0f470 <_dl_dprintf>
    0.00 :	  3516a0c15b:   mov    $0x7f,%edi
    0.00 :	  3516a0c160:   callq  3516a16fd0 <_Exit>
    0.00 :	  3516a0c165:   lea    0x10434(%rip),%rcx        # 3516a1c5a0 <expected1.10492+0x113f>
    0.00 :	  3516a0c16c:   jmpq   3516a0c043 <_dl_relocate_object+0xd53>
    0.00 :	  3516a0c171:   lea    0x103c8(%rip),%rsi        # 3516a1c540 <expected1.10492+0x10df>
    0.00 :	  3516a0c178:   jmp    3516a0c133 <_dl_relocate_object+0xe43>
    0.00 :	  3516a0c17a:   cmp    $0x10,%r14
    0.00 :	  3516a0c17e:   sete   %dl
    0.00 :	  3516a0c181:   cmp    $0x7,%r14
    0.00 :	  3516a0c185:   sete   %al
    0.00 :	  3516a0c188:   or     %dl,%al
    0.00 :	  3516a0c18a:   jne    3516a0c1d9 <_dl_relocate_object+0xee9>
    0.00 :	  3516a0c18c:   cmp    $0x12,%r14
    0.00 :	  3516a0c190:   je     3516a0c1d9 <_dl_relocate_object+0xee9>
    0.00 :	  3516a0c192:   cmp    $0x11,%r14
    0.00 :	  3516a0c196:   je     3516a0c1d9 <_dl_relocate_object+0xee9>
    0.00 :	  3516a0c198:   xor    %ecx,%ecx
    0.00 :	  3516a0c19a:   cmp    $0x24,%r14
    0.00 :	  3516a0c19e:   sete   %cl
    0.00 :	  3516a0c1a1:   xor    %edx,%edx
    0.00 :	  3516a0c1a3:   cmp    $0x5,%r14
    0.00 :	  3516a0c1a7:   sete   %dl
    0.00 :	  3516a0c1aa:   add    %edx,%edx
    0.00 :	  3516a0c1ac:   or     %ecx,%edx
    0.00 :	  3516a0c1ae:   cmp    0x400(%rbx),%edx
    0.00 :	  3516a0c1b4:   jne    3516a0bae1 <_dl_relocate_object+0x7f1>
    0.00 :	  3516a0c1ba:   mov    0x410(%rbx),%rax
    0.00 :	  3516a0c1c1:   addq   $0x1,0x2147b7(%rip)        # 3516c20980 <_rtld_global+0x980>
    0.00 :	  3516a0c1c9:   mov    0x408(%rbx),%rdx
    0.00 :	  3516a0c1d0:   mov    %rax,-0x38(%rbp)
    0.00 :	  3516a0c1d4:   jmpq   3516a0bb70 <_dl_relocate_object+0x880>
    0.00 :	  3516a0c1d9:   mov    $0x1,%ecx
    0.00 :	  3516a0c1de:   jmp    3516a0c1a1 <_dl_relocate_object+0xeb1>
    0.00 :	  3516a0c1e0:   mov    0x10(%r13),%rax
    0.00 :	  3516a0c1e4:   add    (%rbx),%rax
    0.00 :	  3516a0c1e7:   mov    %rax,(%r15)
    0.00 :	  3516a0c1ea:   jmpq   3516a0bbd0 <_dl_relocate_object+0x8e0>
    0.00 :	  3516a0c1ef:   mov    %rdx,%rdi
    0.00 :	  3516a0c1f2:   mov    %rdx,-0xd0(%rbp)
    0.00 :	  3516a0c1f9:   callq  3516a0b2c0 <_dl_allocate_static_tls>
    0.00 :	  3516a0c1fe:   mov    -0xd0(%rbp),%rdx
    0.00 :	  3516a0c205:   mov    -0x38(%rbp),%rax
    0.00 :	  3516a0c209:   mov    0x440(%rdx),%rcx
    0.00 :	  3516a0c210:   jmpq   3516a0b88a <_dl_relocate_object+0x59a>
    0.00 :	  3516a0c215:   lea    0x102d4(%rip),%rsi        # 3516a1c4f0 <expected1.10492+0x108f>
    0.00 :	  3516a0c21c:   jmpq   3516a0b92c <_dl_relocate_object+0x63c>
    0.00 :	  3516a0c221:   mov    -0x38(%rbp),%rcx
    0.00 :	  3516a0c225:   mov    0x10(%r13),%rsi
    0.00 :	  3516a0c229:   add    0x8(%rcx),%rsi
    0.00 :	  3516a0c22d:   mov    %rdx,%rdi
    0.00 :	  3516a0c230:   callq  3516a162d0 <_dl_make_tlsdesc_dynamic>
    0.00 :	  3516a0c235:   lea    0xa554(%rip),%rdx        # 3516a16790 <_dl_tlsdesc_dynamic>
    0.00 :	  3516a0c23c:   mov    %rax,0x8(%r15)
    0.00 :	  3516a0c240:   mov    %rdx,(%r15)
    0.00 :	  3516a0c243:   jmpq   3516a0b820 <_dl_relocate_object+0x530>
    0.00 :	  3516a0c248:   mov    %rdx,%rdi
    0.00 :	  3516a0c24b:   mov    %rdx,-0xd0(%rbp)
    0.00 :	  3516a0c252:   callq  3516a0b1f0 <_dl_try_allocate_static_tls>
    0.00 :	  3516a0c257:   test   %eax,%eax
    0.00 :	  3516a0c259:   mov    -0xd0(%rbp),%rdx
    0.00 :	  3516a0c260:   jne    3516a0c221 <_dl_relocate_object+0xf31>
    0.00 :	  3516a0c262:   mov    -0x38(%rbp),%rcx
    0.00 :	  3516a0c266:   mov    0x440(%rdx),%rax
    0.00 :	  3516a0c26d:   jmpq   3516a0b7ff <_dl_relocate_object+0x50f>
 Percent |	Source code & Disassembly of libc-2.12.so for cycles
--------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000003516e37830 <__GI_____strtoul_l_internal>:
    0.00 :	  3516e37830:   push   %r15
    0.00 :	  3516e37832:   push   %r14
    0.00 :	  3516e37834:   push   %r13
    0.00 :	  3516e37836:   push   %r12
    0.00 :	  3516e37838:   push   %rbp
    0.00 :	  3516e37839:   push   %rbx
    0.00 :	  3516e3783a:   mov    %rdi,%rbx
    0.00 :	  3516e3783d:   sub    $0x28,%rsp
    0.00 :	  3516e37841:   test   %ecx,%ecx
    0.00 :	  3516e37843:   mov    0x8(%r8),%rax
    0.00 :	  3516e37847:   mov    %rsi,0x8(%rsp)
    0.00 :	  3516e3784c:   jne    3516e37c13 <__GI_____strtoul_l_internal+0x3e3>
    0.00 :	  3516e37852:   xor    %r10d,%r10d
    0.00 :	  3516e37855:   xor    %r12d,%r12d
    0.00 :	  3516e37858:   cmp    $0x1,%edx
    0.00 :	  3516e3785b:   je     3516e37a08 <__GI_____strtoul_l_internal+0x1d8>
    0.00 :	  3516e37861:   test   %edx,%edx
    0.00 :	  3516e37863:   js     3516e37a08 <__GI_____strtoul_l_internal+0x1d8>
    0.00 :	  3516e37869:   cmp    $0x24,%edx
    0.00 :	  3516e3786c:   jg     3516e37a08 <__GI_____strtoul_l_internal+0x1d8>
    0.00 :	  3516e37872:   movzbl (%rbx),%eax
  100.00 :	  3516e37875:   mov    0x68(%r8),%r9
    0.00 :	  3516e37879:   mov    %rbx,%r13
    0.00 :	  3516e3787c:   movsbq %al,%rcx
    0.00 :	  3516e37880:   testb  $0x20,0x1(%r9,%rcx,2)
    0.00 :	  3516e37886:   je     3516e378a5 <__GI_____strtoul_l_internal+0x75>
    0.00 :	  3516e37888:   nopl   0x0(%rax,%rax,1)
    0.00 :	  3516e37890:   add    $0x1,%r13
    0.00 :	  3516e37894:   movzbl 0x0(%r13),%eax
    0.00 :	  3516e37899:   movsbq %al,%rcx
    0.00 :	  3516e3789d:   testb  $0x20,0x1(%r9,%rcx,2)
    0.00 :	  3516e378a3:   jne    3516e37890 <__GI_____strtoul_l_internal+0x60>
    0.00 :	  3516e378a5:   test   %al,%al
    0.00 :	  3516e378a7:   mov    %eax,%esi
    0.00 :	  3516e378a9:   je     3516e37c3b <__GI_____strtoul_l_internal+0x40b>
    0.00 :	  3516e378af:   cmp    $0x2d,%al
    0.00 :	  3516e378b1:   je     3516e37b07 <__GI_____strtoul_l_internal+0x2d7>
    0.00 :	  3516e378b7:   cmp    $0x2b,%al
    0.00 :	  3516e378b9:   movl   $0x0,0x14(%rsp)
    0.00 :	  3516e378c1:   je     3516e37a44 <__GI_____strtoul_l_internal+0x214>
    0.00 :	  3516e378c7:   cmp    $0x30,%sil
    0.00 :	  3516e378cb:   je     3516e37aca <__GI_____strtoul_l_internal+0x29a>
    0.00 :	  3516e378d1:   test   %edx,%edx
    0.00 :	  3516e378d3:   je     3516e37a27 <__GI_____strtoul_l_internal+0x1f7>
    0.00 :	  3516e378d9:   cmp    $0xa,%edx
    0.00 :	  3516e378dc:   je     3516e37a27 <__GI_____strtoul_l_internal+0x1f7>
    0.00 :	  3516e378e2:   lea    -0x2(%rdx),%eax
    0.00 :	  3516e378e5:   xor    %ebp,%ebp
    0.00 :	  3516e378e7:   xor    %r11d,%r11d
    0.00 :	  3516e378ea:   lea    0x115b4f(%rip),%rcx        # 3516f4d440 <__strtol_ul_max_tab>
    0.00 :	  3516e378f1:   cltq   
    0.00 :	  3516e378f3:   test   %sil,%sil
    0.00 :	  3516e378f6:   mov    (%rcx,%rax,8),%r10
    0.00 :	  3516e378fa:   lea    0x115c5f(%rip),%rcx        # 3516f4d560 <__strtol_ul_rem_tab>
    0.00 :	  3516e37901:   movzbl (%rcx,%rax,1),%ecx
    0.00 :	  3516e37905:   mov    %ecx,0x10(%rsp)
    0.00 :	  3516e37909:   je     3516e37a87 <__GI_____strtoul_l_internal+0x257>
    0.00 :	  3516e3790f:   cmp    %r13,%r11
    0.00 :	  3516e37912:   je     3516e37a87 <__GI_____strtoul_l_internal+0x257>
    0.00 :	  3516e37918:   lea    -0x1(%rbp),%rcx
    0.00 :	  3516e3791c:   mov    %r13,%rdi
    0.00 :	  3516e3791f:   xor    %r14d,%r14d
    0.00 :	  3516e37922:   xor    %eax,%eax
    0.00 :	  3516e37924:   movslq %edx,%r15
    0.00 :	  3516e37927:   mov    %rcx,0x18(%rsp)
    0.00 :	  3516e3792c:   nopl   0x0(%rax)
    0.00 :	  3516e37930:   lea    -0x30(%rsi),%ecx
    0.00 :	  3516e37933:   cmp    $0x9,%cl
    0.00 :	  3516e37936:   jbe    3516e3798a <__GI_____strtoul_l_internal+0x15a>
    0.00 :	  3516e37938:   test   %rbp,%rbp
    0.00 :	  3516e3793b:   je     3516e3796d <__GI_____strtoul_l_internal+0x13d>
    0.00 :	  3516e3793d:   xor    %ecx,%ecx
    0.00 :	  3516e3793f:   cmp    %sil,(%r12)
    0.00 :	  3516e37943:   je     3516e3795b <__GI_____strtoul_l_internal+0x12b>
    0.00 :	  3516e37945:   jmp    3516e3796d <__GI_____strtoul_l_internal+0x13d>
    0.00 :	  3516e37947:   nopw   0x0(%rax,%rax,1)
    0.00 :	  3516e37950:   movzbl (%r12,%rcx,1),%r9d
    0.00 :	  3516e37955:   cmp    (%rdi,%rcx,1),%r9b
    0.00 :	  3516e37959:   jne    3516e37964 <__GI_____strtoul_l_internal+0x134>
    0.00 :	  3516e3795b:   add    $0x1,%rcx
    0.00 :	  3516e3795f:   cmp    %rcx,%rbp
    0.00 :	  3516e37962:   ja     3516e37950 <__GI_____strtoul_l_internal+0x120>
    0.00 :	  3516e37964:   cmp    %rbp,%rcx
    0.00 :	  3516e37967:   je     3516e37ac0 <__GI_____strtoul_l_internal+0x290>
    0.00 :	  3516e3796d:   mov    0x68(%r8),%rcx
    0.00 :	  3516e37971:   movzbl %sil,%esi
    0.00 :	  3516e37975:   testb  $0x4,0x1(%rcx,%rsi,2)
    0.00 :	  3516e3797a:   je     3516e37a7e <__GI_____strtoul_l_internal+0x24e>
    0.00 :	  3516e37980:   mov    0x78(%r8),%rcx
    0.00 :	  3516e37984:   mov    (%rcx,%rsi,4),%ecx
    0.00 :	  3516e37987:   sub    $0x37,%ecx
    0.00 :	  3516e3798a:   movzbl %cl,%esi
    0.00 :	  3516e3798d:   cmp    %esi,%edx
    0.00 :	  3516e3798f:   jle    3516e37a7e <__GI_____strtoul_l_internal+0x24e>
    0.00 :	  3516e37995:   cmp    %rax,%r10
    0.00 :	  3516e37998:   jb     3516e37a68 <__GI_____strtoul_l_internal+0x238>
    0.00 :	  3516e3799e:   cmp    %r10,%rax
    0.00 :	  3516e379a1:   je     3516e37a58 <__GI_____strtoul_l_internal+0x228>
    0.00 :	  3516e379a7:   imul   %r15,%rax
    0.00 :	  3516e379ab:   movzbl %cl,%ecx
    0.00 :	  3516e379ae:   lea    (%rcx,%rax,1),%rax
    0.00 :	  3516e379b2:   add    $0x1,%rdi
    0.00 :	  3516e379b6:   movzbl (%rdi),%esi
    0.00 :	  3516e379b9:   test   %sil,%sil
    0.00 :	  3516e379bc:   je     3516e37a7e <__GI_____strtoul_l_internal+0x24e>
    0.00 :	  3516e379c2:   cmp    %rdi,%r11
    0.00 :	  3516e379c5:   jne    3516e37930 <__GI_____strtoul_l_internal+0x100>
    0.00 :	  3516e379cb:   cmpq   $0x0,0x8(%rsp)
    0.00 :	  3516e379d1:   je     3516e379db <__GI_____strtoul_l_internal+0x1ab>
    0.00 :	  3516e379d3:   mov    0x8(%rsp),%rdx
    0.00 :	  3516e379d8:   mov    %rdi,(%rdx)
    0.00 :	  3516e379db:   test   %r14d,%r14d
    0.00 :	  3516e379de:   jne    3516e37b47 <__GI_____strtoul_l_internal+0x317>
    0.00 :	  3516e379e4:   mov    0x14(%rsp),%ecx
    0.00 :	  3516e379e8:   mov    %rax,%rdx
    0.00 :	  3516e379eb:   neg    %rdx
    0.00 :	  3516e379ee:   test   %ecx,%ecx
    0.00 :	  3516e379f0:   cmovne %rdx,%rax
    0.00 :	  3516e379f4:   add    $0x28,%rsp
    0.00 :	  3516e379f8:   pop    %rbx
    0.00 :	  3516e379f9:   pop    %rbp
    0.00 :	  3516e379fa:   pop    %r12
    0.00 :	  3516e379fc:   pop    %r13
    0.00 :	  3516e379fe:   pop    %r14
    0.00 :	  3516e37a00:   pop    %r15
    0.00 :	  3516e37a02:   retq   
    0.00 :	  3516e37a03:   nopl   0x0(%rax,%rax,1)
    0.00 :	  3516e37a08:   mov    0x355591(%rip),%rax        # 351718cfa0 <_DYNAMIC+0x460>
    0.00 :	  3516e37a0f:   movl   $0x16,%fs:(%rax)
    0.00 :	  3516e37a16:   xor    %eax,%eax
    0.00 :	  3516e37a18:   add    $0x28,%rsp
    0.00 :	  3516e37a1c:   pop    %rbx
    0.00 :	  3516e37a1d:   pop    %rbp
    0.00 :	  3516e37a1e:   pop    %r12
    0.00 :	  3516e37a20:   pop    %r13
    0.00 :	  3516e37a22:   pop    %r14
    0.00 :	  3516e37a24:   pop    %r15
    0.00 :	  3516e37a26:   retq   
    0.00 :	  3516e37a27:   test   %r10,%r10
    0.00 :	  3516e37a2a:   jne    3516e37b5e <__GI_____strtoul_l_internal+0x32e>
    0.00 :	  3516e37a30:   mov    $0x8,%eax
    0.00 :	  3516e37a35:   mov    $0xa,%edx
    0.00 :	  3516e37a3a:   xor    %ebp,%ebp
    0.00 :	  3516e37a3c:   xor    %r11d,%r11d
    0.00 :	  3516e37a3f:   jmpq   3516e378ea <__GI_____strtoul_l_internal+0xba>
    0.00 :	  3516e37a44:   add    $0x1,%r13
    0.00 :	  3516e37a48:   movzbl 0x0(%r13),%esi
    0.00 :	  3516e37a4d:   jmpq   3516e378c7 <__GI_____strtoul_l_internal+0x97>
    0.00 :	  3516e37a52:   nopw   0x0(%rax,%rax,1)
    0.00 :	  3516e37a58:   cmp    %esi,0x10(%rsp)
    0.00 :	  3516e37a5c:   jae    3516e379a7 <__GI_____strtoul_l_internal+0x177>
    0.00 :	  3516e37a62:   nopw   0x0(%rax,%rax,1)
    0.00 :	  3516e37a68:   add    $0x1,%rdi
    0.00 :	  3516e37a6c:   mov    $0x1,%r14d
    0.00 :	  3516e37a72:   movzbl (%rdi),%esi
    0.00 :	  3516e37a75:   test   %sil,%sil
    0.00 :	  3516e37a78:   jne    3516e379c2 <__GI_____strtoul_l_internal+0x192>
    0.00 :	  3516e37a7e:   cmp    %rdi,%r13
    0.00 :	  3516e37a81:   jne    3516e379cb <__GI_____strtoul_l_internal+0x19b>
    0.00 :	  3516e37a87:   xor    %eax,%eax
    0.00 :	  3516e37a89:   cmpq   $0x0,0x8(%rsp)
    0.00 :	  3516e37a8f:   je     3516e37a18 <__GI_____strtoul_l_internal+0x1e8>
    0.00 :	  3516e37a91:   mov    %r13,%rax
    0.00 :	  3516e37a94:   sub    %rbx,%rax
    0.00 :	  3516e37a97:   cmp    $0x1,%rax
    0.00 :	  3516e37a9b:   jle    3516e37ab0 <__GI_____strtoul_l_internal+0x280>
    0.00 :	  3516e37a9d:   movsbq -0x1(%r13),%rdx
    0.00 :	  3516e37aa2:   mov    0x78(%r8),%rax
    0.00 :	  3516e37aa6:   lea    -0x1(%r13),%rcx
    0.00 :	  3516e37aaa:   cmpl   $0x58,(%rax,%rdx,4)
    0.00 :	  3516e37aae:   je     3516e37b2d <__GI_____strtoul_l_internal+0x2fd>
    0.00 :	  3516e37ab0:   mov    0x8(%rsp),%rax
    0.00 :	  3516e37ab5:   mov    %rbx,(%rax)
    0.00 :	  3516e37ab8:   xor    %eax,%eax
    0.00 :	  3516e37aba:   jmpq   3516e37a18 <__GI_____strtoul_l_internal+0x1e8>
    0.00 :	  3516e37abf:   nop
    0.00 :	  3516e37ac0:   add    0x18(%rsp),%rdi
    0.00 :	  3516e37ac5:   jmpq   3516e379b2 <__GI_____strtoul_l_internal+0x182>
    0.00 :	  3516e37aca:   test   %edx,%edx
    0.00 :	  3516e37acc:   sete   %al
    0.00 :	  3516e37acf:   cmp    $0x10,%edx
    0.00 :	  3516e37ad2:   je     3516e37adc <__GI_____strtoul_l_internal+0x2ac>
    0.00 :	  3516e37ad4:   test   %al,%al
    0.00 :	  3516e37ad6:   je     3516e378d9 <__GI_____strtoul_l_internal+0xa9>
    0.00 :	  3516e37adc:   movsbq 0x1(%r13),%rdi
    0.00 :	  3516e37ae1:   mov    0x78(%r8),%rcx
    0.00 :	  3516e37ae5:   cmpl   $0x58,(%rcx,%rdi,4)
    0.00 :	  3516e37ae9:   je     3516e37b1d <__GI_____strtoul_l_internal+0x2ed>
    0.00 :	  3516e37aeb:   test   %al,%al
    0.00 :	  3516e37aed:   je     3516e378d9 <__GI_____strtoul_l_internal+0xa9>
    0.00 :	  3516e37af3:   mov    $0x6,%eax
    0.00 :	  3516e37af8:   mov    $0x8,%edx
    0.00 :	  3516e37afd:   movzbl 0x0(%r13),%esi
    0.00 :	  3516e37b02:   jmpq   3516e378e5 <__GI_____strtoul_l_internal+0xb5>
    0.00 :	  3516e37b07:   add    $0x1,%r13
    0.00 :	  3516e37b0b:   movzbl 0x0(%r13),%esi
    0.00 :	  3516e37b10:   movl   $0x1,0x14(%rsp)
    0.00 :	  3516e37b18:   jmpq   3516e378c7 <__GI_____strtoul_l_internal+0x97>
    0.00 :	  3516e37b1d:   add    $0x2,%r13
    0.00 :	  3516e37b21:   mov    $0xe,%eax
    0.00 :	  3516e37b26:   mov    $0x10,%edx
    0.00 :	  3516e37b2b:   jmp    3516e37afd <__GI_____strtoul_l_internal+0x2cd>
    0.00 :	  3516e37b2d:   cmpb   $0x30,-0x2(%r13)
    0.00 :	  3516e37b32:   jne    3516e37ab0 <__GI_____strtoul_l_internal+0x280>
    0.00 :	  3516e37b38:   mov    0x8(%rsp),%rdi
    0.00 :	  3516e37b3d:   xor    %eax,%eax
    0.00 :	  3516e37b3f:   mov    %rcx,(%rdi)
    0.00 :	  3516e37b42:   jmpq   3516e37a18 <__GI_____strtoul_l_internal+0x1e8>
    0.00 :	  3516e37b47:   mov    0x355452(%rip),%rax        # 351718cfa0 <_DYNAMIC+0x460>
    0.00 :	  3516e37b4e:   movl   $0x22,%fs:(%rax)
    0.00 :	  3516e37b55:   or     $0xffffffffffffffff,%rax
    0.00 :	  3516e37b59:   jmpq   3516e37a18 <__GI_____strtoul_l_internal+0x1e8>
    0.00 :	  3516e37b5e:   xor    %eax,%eax
    0.00 :	  3516e37b60:   or     $0xffffffffffffffff,%rcx
    0.00 :	  3516e37b64:   mov    %r12,%rdi
    0.00 :	  3516e37b67:   repnz scas %es:(%rdi),%al
    0.00 :	  3516e37b69:   xor    %eax,%eax
    0.00 :	  3516e37b6b:   not    %rcx
    0.00 :	  3516e37b6e:   lea    -0x1(%rcx),%rbp
    0.00 :	  3516e37b72:   jmp    3516e37b84 <__GI_____strtoul_l_internal+0x354>
    0.00 :	  3516e37b74:   movzbl (%r12,%rax,1),%edx
    0.00 :	  3516e37b79:   cmp    0x0(%r13,%rax,1),%dl
    0.00 :	  3516e37b7e:   jne    3516e37b9b <__GI_____strtoul_l_internal+0x36b>
    0.00 :	  3516e37b80:   add    $0x1,%rax
    0.00 :	  3516e37b84:   cmp    %rbp,%rax
    0.00 :	  3516e37b87:   jb     3516e37b74 <__GI_____strtoul_l_internal+0x344>
    0.00 :	  3516e37b89:   mov    %r13,%r11
    0.00 :	  3516e37b8c:   mov    $0x8,%eax
    0.00 :	  3516e37b91:   mov    $0xa,%edx
    0.00 :	  3516e37b96:   jmpq   3516e378ea <__GI_____strtoul_l_internal+0xba>
    0.00 :	  3516e37b9b:   cmp    %rax,%rbp
    0.00 :	  3516e37b9e:   jbe    3516e37b89 <__GI_____strtoul_l_internal+0x359>
    0.00 :	  3516e37ba0:   mov    %esi,%edx
    0.00 :	  3516e37ba2:   mov    %r13,%rsi
    0.00 :	  3516e37ba5:   jmp    3516e37bae <__GI_____strtoul_l_internal+0x37e>
    0.00 :	  3516e37ba7:   add    $0x1,%rsi
    0.00 :	  3516e37bab:   movzbl (%rsi),%edx
    0.00 :	  3516e37bae:   test   %dl,%dl
    0.00 :	  3516e37bb0:   je     3516e37be6 <__GI_____strtoul_l_internal+0x3b6>
    0.00 :	  3516e37bb2:   lea    -0x30(%rdx),%ecx
    0.00 :	  3516e37bb5:   xor    %eax,%eax
    0.00 :	  3516e37bb7:   cmp    $0x9,%cl
    0.00 :	  3516e37bba:   ja     3516e37bc2 <__GI_____strtoul_l_internal+0x392>
    0.00 :	  3516e37bbc:   jmp    3516e37ba7 <__GI_____strtoul_l_internal+0x377>
    0.00 :	  3516e37bbe:   add    $0x1,%rax
    0.00 :	  3516e37bc2:   cmp    %rbp,%rax
    0.00 :	  3516e37bc5:   jae    3516e37ba7 <__GI_____strtoul_l_internal+0x377>
    0.00 :	  3516e37bc7:   movzbl (%r12,%rax,1),%ecx
    0.00 :	  3516e37bcc:   cmp    (%rsi,%rax,1),%cl
    0.00 :	  3516e37bcf:   je     3516e37bbe <__GI_____strtoul_l_internal+0x38e>
    0.00 :	  3516e37bd1:   movzbl %dl,%edx
    0.00 :	  3516e37bd4:   testb  $0x4,0x1(%r9,%rdx,2)
    0.00 :	  3516e37bda:   je     3516e37be6 <__GI_____strtoul_l_internal+0x3b6>
    0.00 :	  3516e37bdc:   mov    0x78(%r8),%rax
    0.00 :	  3516e37be0:   cmpl   $0x40,(%rax,%rdx,4)
    0.00 :	  3516e37be4:   jle    3516e37ba7 <__GI_____strtoul_l_internal+0x377>
    0.00 :	  3516e37be6:   mov    %r12,%rdx
    0.00 :	  3516e37be9:   mov    %r10,%rcx
    0.00 :	  3516e37bec:   mov    %r13,%rdi
    0.00 :	  3516e37bef:   mov    %r8,(%rsp)
    0.00 :	  3516e37bf3:   callq  3516e43800 <__correctly_grouped_prefixmb>
    0.00 :	  3516e37bf8:   movzbl 0x0(%r13),%esi
    0.00 :	  3516e37bfd:   mov    %rax,%r11
    0.00 :	  3516e37c00:   mov    $0xa,%edx
    0.00 :	  3516e37c05:   mov    $0x8,%eax
    0.00 :	  3516e37c0a:   mov    (%rsp),%r8
    0.00 :	  3516e37c0e:   jmpq   3516e378ea <__GI_____strtoul_l_internal+0xba>
    0.00 :	  3516e37c13:   mov    0x50(%rax),%r10
    0.00 :	  3516e37c17:   movzbl (%r10),%ecx
    0.00 :	  3516e37c1b:   sub    $0x1,%ecx
    0.00 :	  3516e37c1e:   cmp    $0x7d,%cl
    0.00 :	  3516e37c21:   ja     3516e37852 <__GI_____strtoul_l_internal+0x22>
    0.00 :	  3516e37c27:   mov    0x48(%rax),%r12
    0.00 :	  3516e37c2b:   cmpb   $0x0,(%r12)
    0.00 :	  3516e37c30:   jne    3516e37858 <__GI_____strtoul_l_internal+0x28>
    0.00 :	  3516e37c36:   jmpq   3516e37852 <__GI_____strtoul_l_internal+0x22>
    0.00 :	  3516e37c3b:   mov    %rbx,%r13
    0.00 :	  3516e37c3e:   jmpq   3516e37a87 <__GI_____strtoul_l_internal+0x257>
